<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Alone Djangonaut</title><link href="https://alone-djangonaut.com/" rel="alternate"></link><link href="https://alone-djangonaut.com/feeds/all-en.atom.xml" rel="self"></link><id>https://alone-djangonaut.com/</id><updated>2021-01-01T00:00:00+02:00</updated><subtitle>living in the pale blue dot</subtitle><entry><title>How to create a website using Pelican and Netlify (January 2021)</title><link href="https://alone-djangonaut.com/how-to-create-a-website-using-pelican-and-netlify-january-2021" rel="alternate"></link><published>2021-01-01T00:00:00+02:00</published><updated>2021-01-01T00:00:00+02:00</updated><author><name>Nick Mavrakis</name></author><id>tag:alone-djangonaut.com,2021-01-01:/how-to-create-a-website-using-pelican-and-netlify-january-2021</id><summary type="html">&lt;p&gt;How to properly set Pelican, Github and Netlify for a static generated website in minutes.&lt;/p&gt;</summary><content type="html">&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This introduction is going to be short since you already know what &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;, Github and &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; is used for. If not, here's an overview of those services:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pelican: A &lt;a href="https://en.wikipedia.org/wiki/Web_template_system#Static_site_generators"&gt;static site generator&lt;/a&gt; (SSG). In other words, a Python program where you write files in Markdown (or reStructuredText) format and Pelican generates a bunch of &lt;code&gt;.html&lt;/code&gt; files ready to be seen in your browser or deployed in a web server. Got it? No databases (&lt;em&gt;static&lt;/em&gt;), bunch of &lt;code&gt;html&lt;/code&gt;files (&lt;em&gt;site&lt;/em&gt;), pelican python program (&lt;em&gt;generator&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Github: A website which provides hosting for software development and version control using Git. If you're reading this you already know that!&lt;/li&gt;
&lt;li&gt;Netlify: A website that offers hosting for web applications and static websites. The &lt;a href="https://www.netlify.com/pricing/"&gt;free plan&lt;/a&gt; for a simple blog is more than enough. It also has DNS management service where we'll configure a custom domain later on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The choice Pelican was made because I like Python, I'm very familiar with it and if something breaks I can dig into it and fix it. No need to tell about Github! The choice of Netlify was mainly for experiment. I just wanted to try it out and it worked really well. At first, I tried &lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;, but setting up a custom domain there (with SSL and support for &lt;code&gt;www&lt;/code&gt;subdomain) was a headache. So, I &lt;a href="https://en.wikipedia.org/wiki/Separation_of_concerns"&gt;separated the concerns&lt;/a&gt; and used Github for repo hosting and Netlify for website hosting (plus DNS management).&lt;/p&gt;
&lt;p&gt;Feel free to try a different combination for your static site. Check out &lt;a href="https://jamstack.org/generators/"&gt;Jamstack&lt;/a&gt;!&lt;/p&gt;
&lt;h1 id="pelican"&gt;Pelican&lt;/h1&gt;
&lt;p&gt;As of 1&lt;sup&gt;st&lt;/sup&gt; Jan 2021, Netlify &lt;a href="https://community.netlify.com/t/python-version-for-custom-build/6267/3"&gt;supports these Python versions&lt;/a&gt; in the Ubuntu Xenial 16.04 image (current default build image for all new sites): 2.7, 3.5, and 3.7. Thus, you should install Python 3.7 in your system. The recommended way is one: &lt;a href="https://github.com/pyenv/pyenv"&gt;pyenv&lt;/a&gt;. Clean and simple.&lt;/p&gt;
&lt;p&gt;Before you start, you should &lt;a href="https://docs.python.org/3/tutorial/venv.html"&gt;create a vitrualenv&lt;/a&gt; (using python 3.7) and install every pelican-related package under this virtualenv. That's &lt;strong&gt;very important&lt;/strong&gt; in order not to "pollute" your system with unnecessary python packages. &lt;/p&gt;
&lt;p&gt;Since a lot of articles have been written about how to set up Pelican (the &lt;a href="https://docs.getpelican.com/en/latest/"&gt;official docs&lt;/a&gt; are quite explanatory too), I'll assume that you have completed &lt;a href="https://frankcorso.dev/setting-up-pelican-static-site-generator.html"&gt;this tutorial&lt;/a&gt; by &lt;a href="https://github.com/fpcorso"&gt;Frank Corso&lt;/a&gt;. After all, it's just a &lt;code&gt;pip install pelican&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After that, you should initialize your project with git. &lt;code&gt;cd my_project &amp;amp;&amp;amp; git init&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="themes"&gt;Themes&lt;/h2&gt;
&lt;p&gt;Most of the times, you'll want to change the default theme. Once &lt;a href="http://pelicanthemes.com/"&gt;you found&lt;/a&gt; the one you like, visit the github repository and copy the HTTPS url of it (not the SSH one). Then:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; your_project
mkdir themes
git submodule add HTTPS_URL_HERE themes/THEME_NAME_HERE
&lt;span class="c1"&gt;# example&lt;/span&gt;
git submodule add https://github.com/alexandrevicenzi/Flex.git themes/Flex
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We follow this procedure (instead of &lt;code&gt;git clone&lt;/code&gt;) because I have been bitten by Netlify error regarding submodules, during the build procedure. The first error was submodules-related and the other was &lt;a href="https://community.netlify.com/t/hugo-site-deployment-failed-due-to-host-key-verification/783/4"&gt;this&lt;/a&gt; regarding host key verification.&lt;/p&gt;
&lt;p&gt;After you have installed your new theme, read it's documentation, play with the variables it provides (you set these variables inside &lt;code&gt;pelicanconf.py&lt;/code&gt;) and make sure that your site works as expected and looks good.&lt;/p&gt;
&lt;h2 id="commands"&gt;Commands&lt;/h2&gt;
&lt;p&gt;Now that you have your project ready and you can successfully interact with it in your browser, have a look at the &lt;code&gt;Makefile&lt;/code&gt; and the &lt;code&gt;tasks.py&lt;/code&gt; file. These files were produced, automatically, by the &lt;code&gt;pelican-quickstart&lt;/code&gt; command you typed to get started. When you &lt;code&gt;pip freeze&lt;/code&gt; you'll see the package &lt;code&gt;invoke&lt;/code&gt; listed. This &lt;a href="http://www.pyinvoke.org/"&gt;package&lt;/a&gt; allows you to run local commands/tasks just like it's complementary &lt;code&gt;fabric&lt;/code&gt; &lt;a href="https://www.pyinvoke.org/faq.html#invoke-split-from-fabric"&gt;which focus&lt;/a&gt; on remote tasks (usually over SSH).&lt;/p&gt;
&lt;p&gt;Type &lt;code&gt;inv --list&lt;/code&gt; (alias for &lt;code&gt;invoke --list&lt;/code&gt;) and you'll see the available commands. For example, typing &lt;code&gt;inv build&lt;/code&gt; it will actually run under the hood &lt;code&gt;pelican pelicanconf.py&lt;/code&gt;. Of course you could write the pelican command yourself but wrap it in a task it's more flexible once the commands are getting more complex and reusability is needed.&lt;/p&gt;
&lt;p&gt;The most used out-of-the-box command would probably be &lt;code&gt;inv serve&lt;/code&gt;. This command runs a localhost server at port 8000. Visit &lt;code&gt;127.0.0.1:8000&lt;/code&gt; or &lt;code&gt;localhost:8000&lt;/code&gt; and you should see your site. The annoying part is that you have to hit F5 in your browser each time a change is made in one of your &lt;code&gt;.md&lt;/code&gt; or &lt;code&gt;.rst&lt;/code&gt; files. &lt;/p&gt;
&lt;p&gt;Enter, hot-reloading by running &lt;code&gt;inv livereload&lt;/code&gt; (needs &lt;code&gt;pip install livereload&lt;/code&gt;). Now, each time you save an article, the browser tab reloads automatically. There is a &lt;a href="https://github.com/getpelican/pelican/issues/2595"&gt;known closed issue here&lt;/a&gt;, where you have to remove the setting &lt;code&gt;ARTICLE_URL&lt;/code&gt; from the &lt;code&gt;pelicanconf.py&lt;/code&gt; or move it to &lt;code&gt;publishconf.py&lt;/code&gt;. I have done both and works. Among other values, my &lt;code&gt;publishconf.py&lt;/code&gt; includes &lt;code&gt;ARTICLE_URL = "{slug}"&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="github"&gt;Github&lt;/h2&gt;
&lt;p&gt;My &lt;code&gt;.gitignore&lt;/code&gt; file looks like this: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;*.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;
&lt;span class="o"&gt;*.&lt;/span&gt;&lt;span class="n"&gt;swp&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gitignore&lt;/span&gt;
&lt;span class="c1"&gt;# do not track output directory since it will be rebuild by Netlify&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;__pycache__&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="c1"&gt;# This is a PyCharm-specific directory. Delete it if you&amp;#39;re not using PyCharm&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;idea&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Upload your project to Github.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; my_project
git status  &lt;span class="c1"&gt;# optional, check which files are ready to be staged&lt;/span&gt;
git add .
git commit -m &lt;span class="s2"&gt;&amp;quot;initial commit&amp;quot;&lt;/span&gt;
git push -u origin main
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Done. Now we have to find a home for our project.&lt;/p&gt;
&lt;h2 id="netlify"&gt;Netlify&lt;/h2&gt;
&lt;p&gt;In order for others to see your website, you have to host it somewhere. Again, Frank Corso, has a &lt;a href="https://frankcorso.dev/deploying-your-pelican-static-site-to-netlify.html"&gt;second part tutorial with pictures&lt;/a&gt; which guides you through setting up Netlify.&lt;/p&gt;
&lt;p&gt;Two notes here regarding this tutorial. First, in the "Publish directory" setting, enter &lt;code&gt;output&lt;/code&gt; instead of &lt;code&gt;output/&lt;/code&gt;. Secondly, you don't have to set the &lt;code&gt;PYTHON_VERSION&lt;/code&gt; environment variable to &lt;code&gt;3.7&lt;/code&gt; since this is the default. On the other hand, none will hurt if you do :)&lt;/p&gt;
&lt;p&gt;Procedure in a nutshell:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You make changes locally&lt;/li&gt;
&lt;li&gt;You &lt;code&gt;git push -u origin main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Netlify is notified by the push and starts the build process&lt;/li&gt;
&lt;li&gt;One task of the build process is the &lt;code&gt;Build Command&lt;/code&gt; you wrote&lt;/li&gt;
&lt;li&gt;Once all build tasks are completed, the &lt;code&gt;output&lt;/code&gt; folder will hold the final &lt;code&gt;.html&lt;/code&gt; files (along with any js, css, images, fonts etc) which you see in your browser.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="custom-domain"&gt;Custom Domain&lt;/h2&gt;
&lt;p&gt;Netlify, gives each app a unique url (for example &lt;code&gt;https://admiring-sammet-45tt89.netlify.app/&lt;/code&gt;). If you're fine with that then... congratulations! You have your site deployed and hosted on Netlify.&lt;/p&gt;
&lt;p&gt;If not, you have to buy a domain from a registrar. Usually, you buy the bare domain (&lt;code&gt;example.com&lt;/code&gt; instead of &lt;code&gt;www.example.com&lt;/code&gt;) and then you can have as many subdomains as you want (depending on you registrar). &lt;/p&gt;
&lt;p&gt;Once you buy it, you can connect it with your netlify app. Steps to follow:&lt;/p&gt;
&lt;p&gt;Open the dashboard of your registrar page, where you have admin privileges of your domain. For this specific domain (say, &lt;code&gt;alone-djangonaut.com&lt;/code&gt;) change the nameservers to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dns1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p05&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nsone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;
&lt;span class="n"&gt;dns2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p05&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nsone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;
&lt;span class="n"&gt;dns3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p05&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nsone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;
&lt;span class="n"&gt;dns4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p05&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nsone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Wait 10-15 minutes (maybe less) until the new information is propagated among the nameservers. &lt;/p&gt;
&lt;p&gt;Now, visit the dashboard of your app on Netlify (&lt;code&gt;https://app.netlify.com/teams/YOUR_USERNAME/sites&lt;/code&gt;). Click on your project you want to bind the domain with. Click &lt;code&gt;Domain Settings&lt;/code&gt;. You should see this:&lt;/p&gt;
&lt;p&gt;&lt;img src="/home/nick/Documents/hobby/Python/alone_djangonaut/content/images/pelican_netlify/netlify_domain_list.png" alt="Domain list in Netlify" style="zoom:80%;" /&gt;&lt;/p&gt;
&lt;p&gt;If  &lt;code&gt;Netlify DNS&lt;/code&gt; button is not showing, either the nameservers you entered in your registrar page are not propagated yet or there is a typo there. Check again and refresh the page on Netlify until this button is shown. Once it's there, click on it. You should see this:&lt;/p&gt;
&lt;p&gt;&lt;img src="/home/nick/Documents/hobby/Python/alone_djangonaut/content/images/pelican_netlify/netlify_dns.png" alt="Netlify DNS records" style="zoom:80%;" /&gt;&lt;/p&gt;
&lt;p&gt;Each line is a DNS record. The two records that have &lt;code&gt;IN NETLIFY&lt;/code&gt; will be already there. Disregard the other records. There is a Bonus section at the end of this article (setting up an email using your domain) that explains these records.&lt;/p&gt;
&lt;p&gt;For now, you're all done. Visit your domain and share your work with others!&lt;/p&gt;
&lt;h2 id="expenses"&gt;Expenses&lt;/h2&gt;
&lt;p&gt;For a personal blog in order to keep your articles/photos/thoughts/you-name-it you don't want to have an extra headache in your monthly expenses. If you do not buy a domain and use the one provided by Netlify, your monthly charge will be zero (0). &lt;/p&gt;
&lt;p&gt;If you decide to buy one, then you set the monthly charge because not all domains cost the same (it depends on various factors such as the Top Level Domain - &lt;code&gt;.com&lt;/code&gt;, &lt;code&gt;.io&lt;/code&gt;, &lt;code&gt;.dev&lt;/code&gt;, &lt;code&gt;.info&lt;/code&gt; etc). Thus it's your choice how much you're able to spend.&lt;/p&gt;
&lt;h2 id="workflow"&gt;Workflow&lt;/h2&gt;
&lt;p&gt;As we said earlier, each time you make a change in your project in contrast to the one that's on Github, you have to push the changes. That's it! You can also wrap this procedure in a function inside &lt;code&gt;tasks.py&lt;/code&gt; and simply do &lt;code&gt;inv push&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# tasks.py&lt;/span&gt;

&lt;span class="c1"&gt;# ... other tasks here&lt;/span&gt;

&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Push project to Github&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;git add . &amp;amp;&amp;amp; git commit -m &amp;quot;Update project&amp;quot; &amp;amp;&amp;amp; git push origin main&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="bonus-section-setup-an-email-with-your-custom-domain"&gt;Bonus section (setup an email with your custom domain)&lt;/h2&gt;
&lt;p&gt;It's a little bit unprofessional to own a domain and not an email with this domain, isn't it? How about to fix that? Bonus #2: this service is also free!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Visit https://forwardemail.net/ and create an account. &lt;/li&gt;
&lt;li&gt;Go to https://forwardemail.net/en/my-account/domains and click on &lt;code&gt;ADD NEW DOMAIN&lt;/code&gt; button. &lt;/li&gt;
&lt;li&gt;Enter your custom domain you bought (i.e &lt;code&gt;alone-djangonaut.com&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Click on &lt;code&gt;Configure your domain&lt;/code&gt; button and follow the very-well-explained instructions&lt;/li&gt;
&lt;li&gt;Once you have completed these steps, go back and click on &lt;code&gt;Verify Records&lt;/code&gt; button (see image below)&lt;/li&gt;
&lt;li&gt;You'll probably get an error since it's too early. You have to wait from 1-10 hours in order for propagation to complete&lt;/li&gt;
&lt;li&gt;That's it. Now you can receive email using your domain.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="/home/nick/Documents/hobby/Python/alone_djangonaut/content/images/pelican_netlify/forwardemail.png" alt="Forwardemail domain status page" style="zoom:80%;" /&gt;&lt;/p&gt;
&lt;p&gt;You can also send emails using your domain (&lt;code&gt;info@alone-djangonaut.com&lt;/code&gt;). For this, you have to follow the instructions after you click the button &lt;code&gt;Setup your Gmail&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can use the image above (with the DNS records), in the &lt;code&gt;Custom Domain&lt;/code&gt; section, for reference. All records, are going to be written in the Netlify's DNS records. Not your registrar's page. That's because we have changed the nameservers and we are using Netlify's nameservers.&lt;/p&gt;
&lt;h2 id="fin"&gt;Fin&lt;/h2&gt;
&lt;p&gt;You're now a professional with your own website, domain and email!&lt;/p&gt;</content><category term="python, website"></category><category term="python"></category><category term="pelican"></category><category term="netlify"></category></entry><entry><title>Django, Axios and CSRF token</title><link href="https://alone-djangonaut.com/django-axios-and-csrf-token" rel="alternate"></link><published>2020-04-18T00:00:00+03:00</published><updated>2020-04-18T00:00:00+03:00</updated><author><name>Nick Mavrakis</name></author><id>tag:alone-djangonaut.com,2020-04-18:/django-axios-and-csrf-token</id><summary type="html">&lt;p&gt;How to properly set Django and axios library to work together with CSRF protection.&lt;/p&gt;</summary><content type="html">&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;I am building a "hybrid web app" (I'll post on it in the near future) using &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt; to the front and &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; to the back.  A "hybrid web app" is something between a SPA and a classic website. The server sends the HTML template, the HTML template has a Vue component and then Vue takes place, mounts on it and do its things.&lt;/p&gt;
&lt;p&gt;The app consists of some forms. When the user presses the &lt;code&gt;submit&lt;/code&gt; button, the Vue component will make a &lt;code&gt;POST&lt;/code&gt; &lt;code&gt;XMLHttpRequest&lt;/code&gt; (aka AJAX request) using the &lt;a href="https://github.com/axios/axios"&gt;axios&lt;/a&gt; library and the server will respond with some JSON data. The reason I want to make an AJAX call and not a usual form submit is that I do not want the page to refresh and the state of my Vue app re-initialize. So far so good.&lt;/p&gt;
&lt;p&gt;Since, my Django view is &lt;code&gt;CSRF&lt;/code&gt; protected, I want axios to properly handle the CSRF token for me and everything work transparent. Fortunately, &lt;code&gt;axios&lt;/code&gt; has two config settings (&lt;code&gt;xsrfHeaderName&lt;/code&gt; and &lt;code&gt;xsrfCookieName&lt;/code&gt;) which set the proper header of the request in order to pass the csrf token to the server.&lt;/p&gt;
&lt;p&gt;However, &lt;code&gt;axios&lt;/code&gt; gives you the possibility to add (extra) headers using the &lt;code&gt;headers&lt;/code&gt; config object. This is the point where I got confused. What is the meaning of having two separate settings for &lt;code&gt;xsrf&lt;/code&gt; handling while you can manually config this in the &lt;code&gt;headers&lt;/code&gt; objects?&lt;/p&gt;
&lt;p&gt;First things first:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The form does not include a hidden input field named &lt;code&gt;csrftoken&lt;/code&gt; because we want to pass it to the server using only the HTTP headers. More on this on the &lt;a href="https://docs.djangoproject.com/en/dev/ref/csrf/#ajax"&gt;&lt;code&gt;AJAX&lt;/code&gt; section in Django docs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The csrf token is passed to the Vue component as a prop. So, the component knows the token.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="axios-django-communication-using-the-default-settings"&gt;Axios-Django communication using the default settings&lt;/h2&gt;
&lt;p&gt;Let's begin with the very first response from the server to the client when the latter requests a page. Note, that we will use the defaults that Django &lt;strong&gt;and&lt;/strong&gt; axios provide, regarding the CSRF (also, I have deleted some irrelevant request/response headers).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Server's very first response. Tells the client to set the cookie named &lt;code&gt;csrftoken&lt;/code&gt; to this very long value!&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HTTP/1.1 200 OK
Date: Fri, 17 Apr 2020 19:05:07 GMT
Server: WSGIServer/0.2 CPython/3.7.1
Content-Type: text/html; charset=utf-8
Set-Cookie: csrftoken=KNsdOUx8u7MSMNPcQdwn5FlrznsGJuhmoCByYyVqW2UHEXV66FC0fBBP2OYlhuJF;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;The page renders and the form appears. We fill the form and hit submit. These are the request headers:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;POST /home/ HTTP/1.1
Host: 127.0.0.1:8000
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:75.0) Gecko/20100101 Firefox/75.0
Accept: application/json, text/plain, */*
Content-Type: application/x-www-form-urlencoded
Cookie: csrftoken=KNsdOUx8u7MSMNPcQdwn5FlrznsGJuhmoCByYyVqW2UHEXV66FC0fBBP2OYlhuJF;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;​   And these are the response headers 😢:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HTTP/1.1 403 Forbidden
Date: Fri, 17 Apr 2020 19:13:04 GMT
Server: WSGIServer/0.2 CPython/3.7.1
Content-Type: text/html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It seems that Django is not able to verify the CSRF token. But how Django looks for it? Remember, we do not include it inside the &lt;code&gt;form&lt;/code&gt; as a hidden input.&lt;/p&gt;
&lt;h2 id="how-django-search-for-the-csrf-token"&gt;How Django search for the CSRF token&lt;/h2&gt;
&lt;p&gt;Django looks two times for the csrf token.&lt;/p&gt;
&lt;p&gt;On the first search, Django tries get the token that has set at the beginning of the communication with the client (look the &lt;code&gt;Set-Cookie&lt;/code&gt; header above). There are two places for that. As a cookie (like above, the default) or embedded inside the session dict.  If stored as a &lt;a href="https://github.com/django/django/blob/master/django/middleware/csrf.py#L170"&gt;cookie&lt;/a&gt;, Django will look for it. Also if inside the &lt;a href="https://github.com/django/django/blob/master/django/middleware/csrf.py#L161"&gt;&lt;code&gt;session dict&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The second phase is when the form is submitted (a &lt;code&gt;POST&lt;/code&gt; request) and the Django view is CSRF protected. Now, Django will have to match the token from the phase one with the one from this request. Django &lt;a href="https://github.com/django/django/blob/master/django/middleware/csrf.py#L297"&gt;first look for a request parameter&lt;/a&gt; named &lt;code&gt;csrfmiddlewaretoken&lt;/code&gt; inside the &lt;code&gt;request.POST&lt;/code&gt; dictionary. Since we do not provide this, Django skips it and &lt;a href="https://github.com/django/django/blob/master/django/middleware/csrf.py#L309"&gt;looks inside the &lt;code&gt;request.META&lt;/code&gt; dictionary&lt;/a&gt; for a header named &lt;code&gt;settings.CSRF_HEADER_NAME&lt;/code&gt; (&lt;a href="https://docs.djangoproject.com/en/dev/ref/settings/#csrf-header-name"&gt;defaults&lt;/a&gt; to &lt;code&gt;HTTP_X_CSRFTOKEN&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Back to our app, there is no &lt;code&gt;HTTP_X_CSRFTOKEN&lt;/code&gt; header in the request headers above. So, Django is unable to verify the token that comes when the form is submitted with the initial one. Thus, you get a beautiful &lt;code&gt;403 Forbidden&lt;/code&gt; status code!&lt;/p&gt;
&lt;h2 id="solutions"&gt;Solution(s)&lt;/h2&gt;
&lt;p&gt;Each solution has benefits and drawbacks. I will mention both in each case.&lt;/p&gt;
&lt;h3 id="using-only-the-headers-object-in-axios-config"&gt;Using only the &lt;code&gt;headers&lt;/code&gt; object in axios config&lt;/h3&gt;
&lt;p&gt;Inside the axios &lt;code&gt;POST&lt;/code&gt; call we do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;X-CSRFTOKEN&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;csrf_token_very_long_string_goes_here&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/url/here/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form_data_to_post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Refresh everything and lets try again. Here are the request headers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;POST /home/ HTTP/1.1
Host: 127.0.0.1:8000
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:75.0) Gecko/20100101 Firefox/75.0
Accept: application/json, text/plain, */*
Content-Type: application/x-www-form-urlencoded
X-CSRFTOKEN: KNsdOUx8u7MSMNPcQdwn5FlrznsGJuhmoCByYyVqW2UHEXV66FC0fBBP2OYlhuJF
Cookie: csrftoken=KNsdOUx8u7MSMNPcQdwn5FlrznsGJuhmoCByYyVqW2UHEXV66FC0fBBP2OYlhuJF;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the response ones:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HTTP/1.1 200 OK
Date: Fri, 17 Apr 2020 20:03:19 GMT
Server: WSGIServer/0.2 CPython/3.7.1
Content-Type: application/json
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that the request includes the header &lt;code&gt;X-CSRFTOKEN&lt;/code&gt; (which is the default Django is looking) with the token as its value, the CSRF mechanism verifies the initial and the new token and responds with the &lt;code&gt;200 OK&lt;/code&gt; status code!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Benefits: dead simple to use plus it works with the &lt;a href="https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-httponly"&gt;&lt;code&gt;CSRF_COOKIE_HTTPONLY = True&lt;/code&gt;&lt;/a&gt; setting.&lt;/li&gt;
&lt;li&gt;Drawbacks: if your app has many forms, you have to remember to pass it in each &lt;code&gt;axios.post()&lt;/code&gt; call. Explicit is better than implicit, but many developers are lazy. Which brings us to the second solution.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="using-the-xsrfheadername-and-xsrfcookiename-axios-config-settings"&gt;Using the &lt;code&gt;xsrfHeaderName&lt;/code&gt; and &lt;code&gt;xsrfCookieName&lt;/code&gt; axios config settings&lt;/h3&gt;
&lt;p&gt;Inside your &lt;code&gt;main.js&lt;/code&gt; file (or another that you keep your configurations) enter this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;axios&amp;#39;&lt;/span&gt;
&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;xsrfHeaderName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;X-CSRFTOKEN&amp;quot;&lt;/span&gt;
&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;xsrfCookieName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;csrftoken&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now in each axios &lt;code&gt;POST&lt;/code&gt; call you make, axios will embed the appropriate header for you.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// No need to set the {headers} object as the 3rd argument&lt;/span&gt;
&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/url/here/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form_data_to_post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here are the request headers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;POST /home/ HTTP/1.1
Host: 127.0.0.1:8000
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:75.0) Gecko/20100101 Firefox/75.0
Accept: application/json, text/plain, */*
Content-Type: application/x-www-form-urlencoded
X-CSRFToken: KNsdOUx8u7MSMNPcQdwn5FlrznsGJuhmoCByYyVqW2UHEXV66FC0fBBP2OYlhuJF
Cookie: csrftoken=KNsdOUx8u7MSMNPcQdwn5FlrznsGJuhmoCByYyVqW2UHEXV66FC0fBBP2OYlhuJF;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Spoiler alert! The response contains a &lt;code&gt;200 OK&lt;/code&gt; status code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Benefits: as previously said, you declare it once in your js config file and forget about it.&lt;/li&gt;
&lt;li&gt;Drawbacks: unfortunately, turning &lt;a href="https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-httponly"&gt;&lt;code&gt;CSRF_COOKIE_HTTPONLY = True&lt;/code&gt;&lt;/a&gt;, Django will give you a &lt;code&gt;403 Forbidden&lt;/code&gt; error since, now, JavaScript (in other words axios) cannot read the cookie and will not set the appropriate header on the request.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tweaksplayground"&gt;Tweaks/Playground&lt;/h3&gt;
&lt;p&gt;Bonus: You can change the header names on both Django and axios and things will still work. Example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# settings.py&lt;/span&gt;

&lt;span class="c1"&gt;# The default is HTTP_X_CSRFTOKEN.&lt;/span&gt;
&lt;span class="c1"&gt;# Now Django will look for this header name on the request.&lt;/span&gt;
&lt;span class="c1"&gt;# Something like: HTTP_BLABLABLA: &amp;lt;very_long_token_here&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;CSRF_HEADER_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;HTTP_HELLOWORLD&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# The default is csrftoken.&lt;/span&gt;
&lt;span class="c1"&gt;# Now Django will set csrf cookie token under this name&lt;/span&gt;
&lt;span class="c1"&gt;# Something like this: Set-Cookie: welcometothejungle=&amp;lt;very_long_token_here&amp;gt;;&lt;/span&gt;
&lt;span class="n"&gt;CSRF_COOKIE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;welcometothejungle&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course, the same must appear in axios settings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// main.js&lt;/span&gt;

&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;xsrfHeaderName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;HELLOWORLD&amp;quot;&lt;/span&gt;
&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;xsrfCookieName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;welcometothejungle&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Delete previous stored cookies and refresh. The very first response by the server is this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HTTP/1.1 200 OK
Date: Fri, 17 Apr 2020 20:57:52 GMT
Server: WSGIServer/0.2 CPython/3.7.1
Content-Type: text/html; charset=utf-8
Set-Cookie: welcometothejungle=bracDaFzr4eXwkiNbZdTEOQ37NRJg1jJIdznw2ypft3ulBSyCc8mKEKBQTm;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then comes the form submit &lt;code&gt;POST&lt;/code&gt; request:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;POST /home/ HTTP/1.1
Host: 127.0.0.1:8000
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:75.0) Gecko/20100101 Firefox/75.0
Accept: application/json, text/plain, */*
Content-Type: application/x-www-form-urlencoded
HELLOWORLD: SFXi8xjp5U6NKiG4RpAsrPmKi3Jm3jwxJcXlZ41GeY4VccenUS8PL7NTHaKKnSuQ
Cookie: welcometothejungle=SFXi8xjp5U6NKiG4RpAsrPmKi3Jm3jwxJcXlZ41GeY4VccenUS8PL7NTHaKKnSuQ;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The response is a &lt;code&gt;200 OK&lt;/code&gt; status!&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Reading the source code of a library (such a Django) makes you understand some things in depth and know how certain pieces fit together. Try it and you'll not lose!&lt;/p&gt;
&lt;p&gt;Personally, I prefer the first approach (the explicit one) because for &lt;a href="https://youtu.be/QuhgjXKzfI8?t=4194"&gt;security reasons&lt;/a&gt; I always have &lt;code&gt;CSRF_COOKIE_HTTPONLY&lt;/code&gt; turned on. It is a very good practice and after all....&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Explicit is better than implicit.&lt;/p&gt;
&lt;p&gt;https://www.python.org/dev/peps/pep-0020/&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="django"></category><category term="python"></category><category term="django"></category><category term="csrf"></category></entry><entry><title>A tour on Python Packaging</title><link href="https://alone-djangonaut.com/a-tour-on-python-packaging" rel="alternate"></link><published>2018-11-08T00:00:00+02:00</published><updated>2019-05-07T00:00:00+03:00</updated><author><name>Nick Mavrakis</name></author><id>tag:alone-djangonaut.com,2018-11-08:/a-tour-on-python-packaging</id><summary type="html">&lt;p&gt;The current state of packaging a Python library (not a Python application).&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you're new to Python or a mature one and want to share your code with other developers
or you have build a library to be used by end users and you're struggle with the packaging,
then this tutorial/post/explanatory guide is (possibly) for you.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#assumptions"&gt;Assumptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#packaging-in-python"&gt;Packaging in Python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#modularity"&gt;Modularity&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pypi"&gt;PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setuptools"&gt;setuptools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wheel"&gt;wheel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#twine"&gt;twine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pip"&gt;pip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#difference-between-sdist-and-bdist_wheel"&gt;Difference between sdist and bdist_wheel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-basics"&gt;The basics&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#name"&gt;Name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cookiecutter"&gt;Cookiecutter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#structure"&gt;Structure&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#requirements_devtxt"&gt;requirements_dev.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#makefile"&gt;Makefile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#license"&gt;LICENSE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#docs-authorsrst-contributingrst-historyrst-and-readmerst"&gt;docs/, AUTHORS.rst, CONTRIBUTING.rst, HISTORY.rst and README.rst&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tests-and-toxini"&gt;tests/ and tox.ini&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#setuppy"&gt;setup.py&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#metadata"&gt;Metadata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#requirements"&gt;Requirements&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#install_requires"&gt;install_requires&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python_requires"&gt;python_requires&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extras_require"&gt;extras_require&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#entry-points"&gt;Entry points&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#packaging"&gt;Packaging&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#wheels-aka-built-distribution"&gt;Wheels (aka built distribution)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sdist-aka-source-distribution"&gt;Sdist (aka source distribution)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#packages"&gt;Packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#zip_safe"&gt;zip_safe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#test_suite"&gt;test_suite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setupcfg"&gt;setup.cfg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#manifestin"&gt;MANIFEST.in&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#upload"&gt;Upload&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#keyring"&gt;keyring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing-your-uploaded-package"&gt;Installing your uploaded package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#sum-up"&gt;Sum up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#python-packaging-related-videos"&gt;Python packaging-related videos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-packaging-related-podcasts"&gt;Python packaging-related podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-packaging-related-articles"&gt;Python packaging-related articles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="prerequisites"&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;First of all, you &lt;strong&gt;must&lt;/strong&gt; understand some basics around Python packaging
terminology or else this (useful) post will turn into an incomprehensible one!&lt;/p&gt;
&lt;p&gt;Your first stop is &lt;a href="https://packaging.python.org/glossary/"&gt;packaging glossary&lt;/a&gt;.
In there, you'll find the terminology around python packaging.
Some things I would like to highlight:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;artifact&lt;/code&gt; (not listed): fancy word for file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source distribution (sdist)&lt;/code&gt;: simple, source only &lt;code&gt;.tar.gz&lt;/code&gt; archive. &lt;strong&gt;Only&lt;/strong&gt; for pure Python modules/packages
(ones that do not contain any C/C++ code).&lt;/li&gt;
&lt;li&gt;The institution set up to deal with distribution in Python is called the &lt;a href="https://www.pypa.io/en/latest/"&gt;Python Packaging Authority&lt;/a&gt;.
So, to a programmer, a &lt;code&gt;distribution&lt;/code&gt; looks like a &lt;em&gt;directory containing a bunch of Python code&lt;/em&gt; next to a &lt;code&gt;setup.py&lt;/code&gt; which describes
that code and adds some metadata to it like the name, version, author etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id="assumptions"&gt;&lt;a href="#assumptions"&gt;Assumptions&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This post assumes that python 3.6 is used and you're comfortable with virtualenvs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 3.6 is used&lt;/li&gt;
&lt;li&gt;&lt;a href="https://virtualenv.pypa.io/en/stable/"&gt;virtualenv&lt;/a&gt; is used&lt;/li&gt;
&lt;li&gt;and more preferably &lt;a href="https://virtualenvwrapper.readthedocs.io/en/stable/"&gt;virtualenvwrapper&lt;/a&gt; is used&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If neither &lt;code&gt;virtualenv&lt;/code&gt; or &lt;code&gt;virtualenvwrapper&lt;/code&gt; are used then, the built-in
&lt;code&gt;python3 -m venv path/to/virtualenv&lt;/code&gt; command may be used as well but you have
to take care (each time) of the &lt;code&gt;activate&lt;/code&gt; script and that &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;setuptools&lt;/code&gt; and
&lt;code&gt;wheel&lt;/code&gt; are installed (things that the above tools do automatically).&lt;/p&gt;
&lt;p&gt;When the status of the &lt;a href="https://www.python.org/dev/peps/pep-0582/"&gt;PEP 582 - Python local packages directory&lt;/a&gt;
becomes &lt;em&gt;Final&lt;/em&gt; then we (might) get rid of the 3rd party virtualenv tools.&lt;/p&gt;
&lt;h1 id="packaging-in-python"&gt;&lt;a href="#packaging_in_python"&gt;Packaging in Python&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://packaging.python.org/overview/"&gt;It has been written&lt;/a&gt; and it's quite self-explanatory. Nothing to add here.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a general-purpose programming language, Python is designed to be used in many ways.
You can build web sites or industrial robots or a game for your friends to play, and much more, all using the same core technology.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The term &lt;em&gt;python packaging&lt;/em&gt; is quite broad and depending on the scenario and purpose of the code written, it applies accordingly.
That said, in this post we will focus on &lt;a href="https://packaging.python.org/overview/#python-source-distributions"&gt;packaging Python source distributions&lt;/a&gt;.
This means to package a &lt;a href="https://docs.python.org/3/glossary.html#term-package"&gt;Python package&lt;/a&gt; (for distribution) that contains
pure Python code.&lt;/p&gt;
&lt;h2 id="modularity"&gt;&lt;a href="#modularity"&gt;Modularity&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="pypi"&gt;&lt;a href="#mod_pypi"&gt;PyPI&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://pypi.org/"&gt;PyPI&lt;/a&gt; is the one and only deposit area/space where all Python packages are stored
(just like &lt;a href="https://www.npmjs.com/"&gt;npmjs&lt;/a&gt; where all Javascript packages are stored).
Of course, you may have a locally Python package which you don't plan to upload to PyPI.
That's OK. But if you want to share your code with others, then PyPI is the answer.&lt;/p&gt;
&lt;p&gt;Imagine this deposit area like a warehouse (fun fact: that's the alternate name for PyPI).
The main objective of a warehouse is &lt;a href="https://en.wikipedia.org/wiki/Warehouse"&gt;the storage of goods&lt;/a&gt;.
Each good is stored inside a container (a box). This container takes its place somewhere inside the warehouse.
Probably, stacked with other goodies.&lt;/p&gt;
&lt;h3 id="setuptools"&gt;&lt;a href="#mod_setuptools"&gt;setuptools&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://pypi.org/project/setuptools/"&gt;&lt;code&gt;setuptools&lt;/code&gt;&lt;/a&gt; is a Python library (just like hundreds of thousands ones)
which purpose is to take your Python package (directory) as input
and convert it to an archive in order to be placed in the PyPI index.
It's the recommended tool by the &lt;a href="https://www.pypa.io/en/latest/"&gt;PyPA&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setuptools&lt;/code&gt;is the tool to wrap your good inside a container and, eventually,
this container be placed inside the warehouse. The insertion into the warehouse is not performed
by &lt;code&gt;setuptools&lt;/code&gt;, but by another Python package called &lt;a href="https://pypi.org/project/twine/"&gt;&lt;code&gt;twine&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="wheel"&gt;&lt;a href="#mod_wheel"&gt;wheel&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://pypi.org/project/wheel/"&gt;&lt;code&gt;wheel&lt;/code&gt;&lt;/a&gt; is a Python library which provides a &lt;code&gt;bdist_wheel&lt;/code&gt; command for &lt;code&gt;setuptools&lt;/code&gt;.
A wheel file (&lt;code&gt;file.whl&lt;/code&gt;) is a ZIP-format archive with a specially formatted filename and
the &lt;code&gt;.whl&lt;/code&gt; extension.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;wheel&lt;/code&gt; archive may be considered as a container with specifications (like specific
dimensions, weight, labels etc). All wheels will have the same format and, thus, can be
easily unpacked and introspected. &lt;a href="#wheels"&gt;Skip the rest and read about wheels&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="twine"&gt;&lt;a href="#mod_twine"&gt;twine&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://pypi.org/project/twine/"&gt;&lt;code&gt;twine&lt;/code&gt;&lt;/a&gt; is a Python library which given an OS path to your previously converted
archive files (i.e &lt;code&gt;path/to/packaged/archive&lt;/code&gt;), it uploads them on the PyPI.
It's the recommended package by the PyPA to publish Python packages on PyPI in a secure manner
(that is over https).&lt;/p&gt;
&lt;p&gt;Consider &lt;code&gt;twine&lt;/code&gt; as the machine that takes your well-wrapped package and inserts it,
with extreme caution, into the warehouse. Now, your package is stored safely amongst other packages!&lt;/p&gt;
&lt;h3 id="pip"&gt;&lt;a href="#mod_pip"&gt;pip&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://pypi.org/project/pip/"&gt;&lt;code&gt;pip&lt;/code&gt;&lt;/a&gt; is another Python library that acts as a package manager.
It's main role is to download/install/update/downgrade/uninstall packages from/to your system.
When you &lt;code&gt;pip install&lt;/code&gt; something then what &lt;code&gt;pip&lt;/code&gt; does is this: it goes to the PyPI index
(unless told to go somewhere else - &lt;a href="https://pip.pypa.io/en/stable/user_guide/#installing-from-local-packages"&gt;even look in local directories&lt;/a&gt;
and fetches and install the requested package.&lt;/p&gt;
&lt;p&gt;In the warehouse analogy, &lt;code&gt;pip&lt;/code&gt; is the machine (make it a forklift, if you like)
that enters the warehouse, picks the appropriate container, unpacks it and delivers it to you
(the position of &lt;code&gt;you&lt;/code&gt; is outside of the warehouse, waiting for your package to come!).&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;figure style="display: flex; flex-direction: column; justify-content: center; align-items: center;"&gt;
  &lt;a name="warehouse_img"&gt;&lt;/a&gt;
    &lt;img id="pypi-warehouse" src="/images/a_tour_on_python_packaging/pypi_warehouse.jpg" alt="Python Package Index Warehouse representation"&gt;
    &lt;figcaption&gt;Representation of the PyPI and the relevant tools (image source: &lt;a href="https://www.crown.com/en-us/warehouse-solutions-products.html"&gt;www.crown.com&lt;/a&gt;)&lt;/figcaption&gt;
&lt;/figure&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;So, there you have it, a warehouse (PyPI) to store Python codes (libraries, #3),
a tool to wrap your code (&lt;code&gt;setuptools&lt;/code&gt;, #1) in specific formats (&lt;code&gt;sdist&lt;/code&gt; and &lt;code&gt;wheel&lt;/code&gt;, #3),
a tool to put Python code into the warehouse (&lt;code&gt;twine&lt;/code&gt;, #2) and a tool to fetch and
install Python code from the warehouse into your machine (&lt;code&gt;pip&lt;/code&gt;, #4).
This is the backbone knowledge in order to proceed into more on Python packaging.
Once these concepts are clear to your head, then you have everything you need in your arsenal
to package a Python package with ease, reliability and security.
Also, others will be able to download your package and install it without any issues.&lt;/p&gt;
&lt;h2 id="difference-between-sdist-and-bdist_wheel"&gt;&lt;a href="#sdist_wheel_diff"&gt;Difference between &lt;code&gt;sdist&lt;/code&gt; and &lt;code&gt;bdist_wheel&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://packaging.python.org/tutorials/installing-packages/#source-distributions-vs-wheels"&gt;PyPUG (Python Package User Guide) has already covered this difference&lt;/a&gt;
but I would like to clarify some things.&lt;/p&gt;
&lt;p&gt;The command to convert your local directory (which is meant to be a Python library)
into a distributable one is &lt;code&gt;python setup.py sdist bdist_wheel&lt;/code&gt;.
This command will read your &lt;code&gt;setup.py&lt;/code&gt; along with other ones (&lt;code&gt;MANIFEST.in&lt;/code&gt;, &lt;code&gt;setup.cfg&lt;/code&gt; etc)
and will generate two archives: a &lt;code&gt;.tar.gz&lt;/code&gt; (&lt;code&gt;sdist&lt;/code&gt; aka source distribution) and a &lt;code&gt;.whl&lt;/code&gt;
(&lt;code&gt;bdist_wheel&lt;/code&gt; aka binary distribution wheel or just &lt;code&gt;wheel&lt;/code&gt;) one.
You may inspect both of them by double-click on each.&lt;/p&gt;
&lt;p&gt;The main difference between the two is that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;sdist&lt;/code&gt; archive contains a single directory which consists of your source files
   (your actual code which may be either a Python module or a Python package) along with
   the &lt;code&gt;setup.py&lt;/code&gt;, &lt;code&gt;setup.cfg&lt;/code&gt;, &lt;code&gt;MANIFEST.in&lt;/code&gt;etc files (and optionally along with your
   &lt;code&gt;tests/&lt;/code&gt;, &lt;code&gt;docs/&lt;/code&gt; directories depending on your &lt;code&gt;MANIFEST.in&lt;/code&gt; file).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;wheel&lt;/code&gt; contains &lt;strong&gt;only&lt;/strong&gt; two directories, the directory that holds your source
   files &lt;strong&gt;only&lt;/strong&gt; (without the &lt;code&gt;setup.py&lt;/code&gt; files etc) and a &lt;code&gt;.dist-info&lt;/code&gt; directory which
   contains metadata of your package. If you like to learn more on this extra directory,
   read the &lt;a href="https://www.python.org/dev/peps/pep-0427/"&gt;PEP 427 -- The Wheel Binary Package Format 1.0&lt;/a&gt; and the upcoming
   &lt;a href="https://www.python.org/dev/peps/pep-0491/"&gt;PEP 491 -- The Wheel Binary Package Format 1.9&lt;/a&gt; which is still in &lt;code&gt;draft&lt;/code&gt; status.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Another difference is that installing from &lt;code&gt;wheel&lt;/code&gt; is as simple as copy-paste the two
directories as-is inside the &lt;code&gt;site-packages&lt;/code&gt; directory of your environment (that's it)
while installing from &lt;code&gt;sdist&lt;/code&gt; requires this extra step of reading the &lt;code&gt;setup.py&lt;/code&gt; do any
potential compilation, convert to &lt;code&gt;wheel&lt;/code&gt; and then add the directories inside the &lt;code&gt;site-packages&lt;/code&gt; dir.
I am not saying it's bad to install from source but since the author of a package is able to
produce a &lt;code&gt;wheel&lt;/code&gt; as well, then why not upload that too?
Besides, since &lt;a href="https://pip.pypa.io/en/stable/user_guide/#installing-from-wheels"&gt;pip prefers wheel&lt;/a&gt;, having both kind of distributions uploaded,
allows one to convert &lt;code&gt;sidst&lt;/code&gt; to &lt;code&gt;wheel&lt;/code&gt;, store it (cache it) and next time it will
use the cached one (saving bandwidth).
The other way around, convert &lt;code&gt;wheel&lt;/code&gt; into &lt;code&gt;sdist&lt;/code&gt; is not feasible. Put it that way,
&lt;code&gt;wheel&lt;/code&gt; is a distribution format much more minimal that &lt;code&gt;sdist&lt;/code&gt;, thus there is no way
for &lt;code&gt;wheel&lt;/code&gt;s to generate &lt;code&gt;sdist&lt;/code&gt;s.&lt;/p&gt;
&lt;p&gt;If your question is why to have both generated and uploaded to PyPI, the answer is
the edge case of some users which do not have the &lt;a href="https://pypi.org/project/wheel/"&gt;&lt;code&gt;wheel&lt;/code&gt;&lt;/a&gt; package installed
or have an old version of &lt;a href="https://pypi.org/project/pip/"&gt;&lt;code&gt;pip&lt;/code&gt;&lt;/a&gt; which does not support installation from &lt;code&gt;wheel&lt;/code&gt; packages.
On the other hand, having only source distributions uploaded (&lt;code&gt;sdist&lt;/code&gt;) you enforce users
to compile your package each time they download it.
This may not sound too time-consuming but if your package consists of Python extensions
(i.e C, C++ etc) then compiling those may take a long time comparing with &lt;code&gt;wheel&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, upload both and keep everybody happy!&lt;/p&gt;
&lt;h1 id="the-basics"&gt;&lt;a href="#thebasics"&gt;The basics&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;By now, you either have a clear image about what is happening or you're completely
lost, regarding, of course, Python packaging. In this chapter we will play with an
imaginable Python package and try to distribute it to other Pythonistas.&lt;/p&gt;
&lt;h2 id="name"&gt;&lt;a href="#name"&gt;Name&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first thing you'll want to consider when your aim is to create a redistributable
Python package (either to use is locally or distribute it via PyPI) is the name of it.
Once the package has been created and begins to grow, if you decide to change the name
of the package in the middle of the road, then it'll be hard to spot and change
references to this name across your project.
Think first, act last. Of course, IDEs will help you do that in an easy manner, but that means
that you had made a frivolous choice.&lt;/p&gt;
&lt;p&gt;Nevertheless, assuming that you're going to build something that is related with &lt;em&gt;flowers&lt;/em&gt;
you'll have to go to &lt;a href="https://pypi.org/"&gt;PyPI&lt;/a&gt; and search for this term. If it's occupied then see if you
can attach a hyphen (&lt;code&gt;-&lt;/code&gt;) and add another word into it. Do not name your package with more than two
words and make it possible so others will simply &lt;code&gt;pip install package&lt;/code&gt; and then in their code do
&lt;code&gt;import package&lt;/code&gt; or &lt;code&gt;from package import func&lt;/code&gt;.
Sometimes, of course, this will not be feasible, but please try! It's clean, elegant and lazy (for the others).&lt;/p&gt;
&lt;p&gt;Older methods that required to &lt;em&gt;register&lt;/em&gt; the name of the package before uploading it,
&lt;a href="https://packaging.python.org/guides/migrating-to-pypi-org/#registering-package-names-metadata"&gt;are gone&lt;/a&gt;.
You, now, proceed directly to uploading artifacts.&lt;/p&gt;
&lt;p&gt;We have decided that we would like to build a Python library which will add some more
capabilities (methods) for Python strings and lists.
An idea taken from &lt;a href="https://lodash.com/"&gt;lodash&lt;/a&gt; (a famous JS library extending built-in capabilities).
The name of it would be &lt;code&gt;booster&lt;/code&gt;. I think it's concise, short and right to the point.
Plus, &lt;a href="https://pypi.org/search/?q=booster"&gt;it's not reserved in PyPI (until this post is written)&lt;/a&gt;
nor it would be since we'll not upload it. Maybe, a nice choice/idea for the next developer!&lt;/p&gt;
&lt;h2 id="cookiecutter"&gt;&lt;a href="#cookicutter"&gt;Cookiecutter&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We will make our life easier and rely on a cookiecutter to build our package rather than build it from scratch.
That's the reason of a cookiecutter. To make your/our lives as developers easier.&lt;/p&gt;
&lt;p&gt;There is one dominant cookiecutter for Python packages: &lt;a href="https://github.com/audreyr/cookiecutter-pypackage"&gt;the cookiecutter-pypackage&lt;/a&gt;
and several other popular forks like &lt;a href="https://github.com/Nekroze/cookiecutter-pypackage"&gt;Nekroze&lt;/a&gt;,
&lt;a href="https://github.com/ardydedase/cookiecutter-pypackage"&gt;ardydedase&lt;/a&gt;, &lt;a href="https://github.com/samastur/cookiecutter-pypackage"&gt;samastur&lt;/a&gt;
and &lt;a href="https://github.com/audreyr/cookiecutter-pypackage/network/members"&gt;thousands more&lt;/a&gt;!
Pardon me if I have missed a &lt;em&gt;multi-starred&lt;/em&gt; cookiecutter. If so, let me know in the comments below and I'll update this section.&lt;/p&gt;
&lt;p&gt;The logic behind a cookiecutter is pretty simple. A project structure has already been written by the author leaving
&lt;em&gt;placeholders&lt;/em&gt; (usually with &lt;code&gt;{{ name }}&lt;/code&gt;) to be filled through CLI questions by the developer.&lt;/p&gt;
&lt;p&gt;Thus, you &lt;code&gt;pip install cookiecutter&lt;/code&gt; into your virtualenv (or &lt;code&gt;pip install --user cookiecutter&lt;/code&gt; to install it under the &lt;code&gt;~/.local/&lt;/code&gt; directory)
and now you have the &lt;code&gt;cookiecutter&lt;/code&gt; command available. Note that &lt;code&gt;cookiecutter&lt;/code&gt; is a CLI command, not a project template. You use this command
along with a project template URL in order to create a project. Thus, you run &lt;code&gt;cookiecutter &amp;lt;github_repo_url&amp;gt;&lt;/code&gt;,
a series of questions is initiated and at the end you'll have a pre-configured Python package ready to be
developed (not deployed, since there is no source code written by you, yet).
For more info, read the installation guide for the cookiecutter of your choice.
There is &lt;a href="https://github.com/audreyr/cookiecutter#a-pantry-full-of-cookiecutters"&gt;a ton of templates&lt;/a&gt; to choose from (from pure Python packages
to Django, Flask, Pyramid, C++, Java, JS, Tornado etc).&lt;/p&gt;
&lt;p&gt;In this post, we'll use audreyr's cookiecutter &lt;a href="https://github.com/audreyr/cookiecutter-pypackage"&gt;template for pure Python packages&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="structure"&gt;&lt;a href="#structure"&gt;Structure&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Using the above cookiecutter, the following questions showed up...:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;distvenv&lt;span class="o"&gt;)&lt;/span&gt; nick ~/t/boo&amp;gt; cookiecutter https://github.com/audreyr/cookiecutter-pypackage.git
full_name &lt;span class="o"&gt;[&lt;/span&gt;Audrey Roy Greenfeld&lt;span class="o"&gt;]&lt;/span&gt;: Nick Mavrakis
email &lt;span class="o"&gt;[&lt;/span&gt;audreyr@example.com&lt;span class="o"&gt;]&lt;/span&gt;: web@web.gr
github_username &lt;span class="o"&gt;[&lt;/span&gt;audreyr&lt;span class="o"&gt;]&lt;/span&gt;: manikos
project_name &lt;span class="o"&gt;[&lt;/span&gt;Python Boilerplate&lt;span class="o"&gt;]&lt;/span&gt;: booster
project_slug &lt;span class="o"&gt;[&lt;/span&gt;booster&lt;span class="o"&gt;]&lt;/span&gt;: booster
project_short_description &lt;span class="o"&gt;[&lt;/span&gt;Python Boilerplate ... a Python package&lt;span class="o"&gt;]&lt;/span&gt;: Extra functionality &lt;span class="k"&gt;for&lt;/span&gt; Python strings!
pypi_username &lt;span class="o"&gt;[&lt;/span&gt;test_user&lt;span class="o"&gt;]&lt;/span&gt;: test_user
version &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.1.0&lt;span class="o"&gt;]&lt;/span&gt;:
use_pytest &lt;span class="o"&gt;[&lt;/span&gt;n&lt;span class="o"&gt;]&lt;/span&gt;: y
use_pypi_deployment_with_travis &lt;span class="o"&gt;[&lt;/span&gt;y&lt;span class="o"&gt;]&lt;/span&gt;: y
add_pyup_badge &lt;span class="o"&gt;[&lt;/span&gt;n&lt;span class="o"&gt;]&lt;/span&gt;: n
Select command_line_interface:
&lt;span class="m"&gt;1&lt;/span&gt; - Click
&lt;span class="m"&gt;2&lt;/span&gt; - No command-line interface
Choose from &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
create_author_file &lt;span class="o"&gt;[&lt;/span&gt;y&lt;span class="o"&gt;]&lt;/span&gt;: y
Select open_source_license:
&lt;span class="m"&gt;1&lt;/span&gt; - MIT license
&lt;span class="m"&gt;2&lt;/span&gt; - BSD license
&lt;span class="m"&gt;3&lt;/span&gt; - ISC license
&lt;span class="m"&gt;4&lt;/span&gt; - Apache Software License &lt;span class="m"&gt;2&lt;/span&gt;.0
&lt;span class="m"&gt;5&lt;/span&gt; - GNU General Public License v3
&lt;span class="m"&gt;6&lt;/span&gt; - Not open &lt;span class="nb"&gt;source&lt;/span&gt;
Choose from &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;2&lt;/span&gt;, &lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="m"&gt;4&lt;/span&gt;, &lt;span class="m"&gt;5&lt;/span&gt;, &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;distvenv&lt;span class="o"&gt;)&lt;/span&gt; nick ~/t/boo&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;...creating the following project structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;distvenv&lt;span class="o"&gt;)&lt;/span&gt; nick ~/t/boo&amp;gt;ls
booster

&lt;span class="o"&gt;(&lt;/span&gt;distvenv&lt;span class="o"&gt;)&lt;/span&gt; nick ~/t/boo&amp;gt;tree booster/
booster
├── AUTHORS.rst
├── booster
│   ├── booster.py
│   ├── cli.py
│   └── __init__.py
├── CONTRIBUTING.rst
├── docs
│   ├── authors.rst
│   ├── conf.py
│   ├── contributing.rst
│   ├── history.rst
│   ├── index.rst
│   ├── installation.rst
│   ├── make.bat
│   ├── Makefile
│   ├── readme.rst
│   └── usage.rst
├── HISTORY.rst
├── LICENSE
├── Makefile
├── MANIFEST.in
├── README.rst
├── requirements_dev.txt
├── setup.cfg
├── setup.py
├── tests
│   └── test_booster.py
└── tox.ini

&lt;span class="m"&gt;3&lt;/span&gt; directories, &lt;span class="m"&gt;25&lt;/span&gt; files
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Depending on your given answers to the questions the structure may be different,
but some files not, since they are mandatory in order to call this directory a &lt;em&gt;re-distributable Python package&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You may have seen in other Python libraries that the source code is inside a directory called &lt;code&gt;src/&lt;/code&gt;.
I will not advice you to put your code inside the &lt;code&gt;src/&lt;/code&gt; directory or not.
&lt;a href="https://github.com/pypa/python-packaging-user-guide/issues/320"&gt;There is an open issue on PyPA user guide on github&lt;/a&gt;
and if you're brave enough, go read it. After all, it's a great discussion exchanging different thoughts.
That's the spirit of a healthy community!
&lt;a href="https://blog.ionelmc.ro/2014/05/25/python-packaging/"&gt;There is also a great post that enforces you to use the &lt;code&gt;src/&lt;/code&gt; dir&lt;/a&gt;.
Decision is yours. Whichever you take, make sure that your package, at the end, is installable and usable without any errors.&lt;/p&gt;
&lt;p&gt;Now back to the above, generated, file structure. Do not freak out seeing all these files! Most of them are there to &lt;em&gt;support&lt;/em&gt; your project.
You may ask if all these are mandatory in order to upload your simple Python package.
No, they are not. If you had, only, the &lt;code&gt;booster&lt;/code&gt; dir (containing &lt;code&gt;booster.py&lt;/code&gt; file which is actually your code)
and the &lt;code&gt;setup.py&lt;/code&gt; file you would be good to go. A single dir and a file. But that would not be too helpful because it lacks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;license&lt;/li&gt;
&lt;li&gt;documentation&lt;/li&gt;
&lt;li&gt;tests&lt;/li&gt;
&lt;li&gt;continuous integration (CI)&lt;/li&gt;
&lt;li&gt;version control&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;and other goodies which make your package more mature and complete.&lt;/p&gt;
&lt;p&gt;Be patient. Do not rush yourself. Spend some time and &lt;a href="https://blog.digitalocean.com/documentation-as-an-open-source-practice/"&gt;write documentation&lt;/a&gt;
and tests. Many other developers (including yourself tomorrow) will thank you. Personally, if I see a package with no docs, I skip it.
Short story. Not because it's not useful or I want to penaltize it, but because I don't know how to install and use it.
What do I &lt;code&gt;import&lt;/code&gt;? What arguments a function takes? How about tests? Is it tested thoroughly? Why do I have to read the source code in order to use it?
All these questions are vital to every developer before using a package (not just a Python one).&lt;/p&gt;
&lt;p&gt;How satisfied/confident are you when you see a package with decent documentation and over 80% test coverage? Someone, wrote all these.
Someone that took the writing of his/her Python package, seriously. Maybe it's not a single person but a group of contributors.
It does not matter. Time has been spent in order to write docs and tests. That's what makes a package &lt;em&gt;beautiful&lt;/em&gt; and &lt;em&gt;elegant&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson learned&lt;/strong&gt;: Do not hurry to finish your package. PyPI is not going away. Be fussy not only for coding but to support it as well
(support means &lt;em&gt;docs&lt;/em&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;em&gt;tests&lt;/em&gt;).&lt;/p&gt;
&lt;h3 id="requirements_devtxt"&gt;&lt;a href="#requirements_dev.txt"&gt;requirements_dev.txt&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You may have noticed the file &lt;code&gt;requirements_dev.txt&lt;/code&gt; which contains the requirements (aka dependencies) of your project in case
another developer (or even you, the author) wants to reproduce it. By &lt;code&gt;pip install&lt;/code&gt;ing the package, these requirements
will &lt;strong&gt;not&lt;/strong&gt; be honored. These are just for development cases. &lt;a href="https://packaging.python.org/discussions/install-requires-vs-requirements/?highlight=requirements#requirements-files"&gt;The official docs say&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whereas &lt;code&gt;install_requires&lt;/code&gt; defines the dependencies for a single project,
Requirements Files are often used to define the requirements for a complete Python environment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We have not seen &lt;code&gt;install_requires&lt;/code&gt; &lt;a href="#install_requires"&gt;yet&lt;/a&gt;, but keep the above statement in mind. Also, note that this file may be named
any name you like. It's just a convention to name it that way.&lt;/p&gt;
&lt;p&gt;Suppose, for example, that you and me are working on the &lt;code&gt;booster&lt;/code&gt; package. We, both, must have the same development environment
which means the same versions of dependencies and, of course, the same Python version. &lt;code&gt;requirements_dev.txt&lt;/code&gt; ensures scenarios
like this and if I change (or format) my computer then I will be able to reproduce this environment by &lt;code&gt;pip install -r requirements_dev.txt&lt;/code&gt;
under my virtualenv and will be back to tracks.&lt;/p&gt;
&lt;p&gt;You may, also, want to switch &lt;code&gt;requirements_dev.txt&lt;/code&gt; with &lt;code&gt;Pipfile&lt;/code&gt; (and its auto-generated brother &lt;code&gt;Pipfile.lock&lt;/code&gt;).
No changes here. The same logic applies. Instead of &lt;code&gt;pip install -r requirements_dev.txt&lt;/code&gt; you would do &lt;code&gt;pipenv install&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="makefile"&gt;&lt;a href="#makefile"&gt;Makefile&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is a usual &lt;a href="ftp://ftp.gnu.org/old-gnu/Manuals/make-3.79.1/html_chapter/make_2.html"&gt;Make&lt;/a&gt; file which provides some useful
CLI commands to facilitate your development flow.
It's a cookiecutter-specific file and you may alter it at your own needs. Other cookiecutters may have similar &lt;code&gt;Make&lt;/code&gt; file.
You can view it, in order to see each function details or just write &lt;code&gt;make&lt;/code&gt; (under the root package directory,
&lt;code&gt;booster&lt;/code&gt; in our case) and have an overview of the available commands.&lt;/p&gt;
&lt;h3 id="license"&gt;&lt;a href="#license"&gt;LICENSE&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The official packaging docs &lt;a href="https://packaging.python.org/tutorials/packaging-projects/?highlight=license#creating-a-license"&gt;cover this file&lt;/a&gt;
but I would like to add to it a little more.&lt;/p&gt;
&lt;p&gt;This is a mandatory file that &lt;strong&gt;must not be empty&lt;/strong&gt;. If it's omitted then the default LICENCE applied to the
project/package is &lt;em&gt;all rights reserved&lt;/em&gt; which basically means &lt;em&gt;I, the owner of the package, am the only one allowed
to use this package&lt;/em&gt;. Thus, why bother uploading to PyPI? Just keep it in your local directory. PyPI means sharing and
adding a non-empty &lt;code&gt;LICENSE&lt;/code&gt; file, respects this.&lt;/p&gt;
&lt;p&gt;There is a myriad type of licenses out there and digging into them brings a lot of confusion, resulting in omitting the
file, altogether. Play safe and adopt the MIT or BSD licence. I am not promoting these kind of licenses but it's the
most commonly used for open source projects. The user's limitation, by using a package under one of the above licenses,
is &lt;em&gt;to keep the name and the copyright declaration intact&lt;/em&gt;. A useful website that might be help you to pick a license
is the &lt;a href="https://choosealicense.com"&gt;choosealicense.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Congratulations, you now have a package ready to be shared!&lt;/p&gt;
&lt;h3 id="docs-authorsrst-contributingrst-historyrst-and-readmerst"&gt;&lt;a href="#doc_files"&gt;docs/, AUTHORS.rst, CONTRIBUTING.rst, HISTORY.rst and README.rst&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As you might have guessed, these files are documentation files. Each file is pre-filled with content
(thank you cookiecutter) and the tweaks you might do, the first time, are minor. Each file is quite
self-explanatory. Open each file to read the contents and alter it if you like.&lt;/p&gt;
&lt;p&gt;These files are written using the &lt;a href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; file format.
You may use the Markdown format but be aware that &lt;code&gt;.rst&lt;/code&gt; files are by far more rich and extensible.
They play perfect together with Sphinx. Learning this kind of language may take some time but the benefits you gain are huge.
Did we mention to not rush yourself to finish your beloved Python package?
If you do change the format, however, &lt;a href="https://packaging.python.org/specifications/core-metadata/#description-content-type-optional"&gt;you must use a special keyword&lt;/a&gt;
inside the &lt;code&gt;setup&lt;/code&gt; function, the &lt;code&gt;long_description_content_type=text/markdown&lt;/code&gt;.
We have not seen this function, yet. &lt;a href="#setuppy"&gt;I am keeping the desert for last :)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fun fact: The reStructuredText file format may be applied to any kind of text. Not just documentation for you code.
After all, documentation is just text (code-agnostic). You could write a novel too.&lt;/p&gt;
&lt;p&gt;Another part of the documentation procedure is &lt;a href="http://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt;. Sphinx is a documentation generator. What this means is that
you write a bunch of &lt;code&gt;.rst&lt;/code&gt; files, you run &lt;code&gt;make html&lt;/code&gt; and voila. The HTML look of your ugly-looking files have been
generated. A PDF version is also available. There is list of HTML templates available to choose and also Sphinx can
be customized through the &lt;code&gt;docs/conf.py&lt;/code&gt; file. The cookiecutter tool, also, provides another &lt;code&gt;Makefile&lt;/code&gt;, exclusive for
doc facilitation. I think there is no reason, now, not to write docs.&lt;/p&gt;
&lt;p&gt;Bonus tip #1: Once docs have been written, you may upload them on &lt;a href="https://readthedocs.org/"&gt;readthedocs.org&lt;/a&gt; (RTD for short).
Just link your github repo to the RTD and you're good to go (you need an account before that).&lt;/p&gt;
&lt;p&gt;Bonus tip #2: If your Python package is small enough and writing a bunch of docs would be considered overkill
because there is not much to say about it (that is, &lt;em&gt;it can all fit in a single file&lt;/em&gt;) then it is perfectly fine
to include just a &lt;code&gt;README&lt;/code&gt; file. You may then upload it to &lt;a href="https://readthedocs.org/"&gt;readthedocs.org&lt;/a&gt;. Remember that if
you use Markdown, you should change the &lt;code&gt;long_description_content_type&lt;/code&gt; value inside the &lt;code&gt;setup()&lt;/code&gt; function.
Beware though, that the skeleton of this file stays the same with the &lt;em&gt;full version&lt;/em&gt; of the documentation,
which is a &lt;em&gt;contributing&lt;/em&gt;, a &lt;em&gt;history&lt;/em&gt; (or &lt;em&gt;changelog&lt;/em&gt;), an &lt;em&gt;installation&lt;/em&gt;, a &lt;em&gt;usage&lt;/em&gt; section etc.&lt;/p&gt;
&lt;h3 id="tests-and-toxini"&gt;&lt;a href="#tests"&gt;tests/ and tox.ini&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Code without tests is unreliable. Simple as that. It's like having a "friend" on facebook
without actually ever interact with this person. In what context is this person your friend?
Friends, in a general meaning, are people we can count on them. They are reliable. So are
the tests of your code. No more to add here.&lt;/p&gt;
&lt;p&gt;Whether you use &lt;a href="https://docs.pytest.org/en/latest/"&gt;pytest&lt;/a&gt;, &lt;a href="https://docs.python.org/3/library/unittest.html"&gt;unittest&lt;/a&gt;, &lt;a href="https://nose.readthedocs.io/en/latest/"&gt;nose&lt;/a&gt; or something else, all your
test files should live inside the &lt;code&gt;test/&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;In addition, &lt;a href="https://tox.readthedocs.io/en/latest/"&gt;tox&lt;/a&gt; is a Python library which helps you to test your code under different
Python versions and contexts in general. It's extremely powerful, quick and easy to use (although,
there is a slight learning curve, at start, in order to understand how to write the &lt;code&gt;tox.ini&lt;/code&gt; file).&lt;/p&gt;
&lt;h1 id="setuppy"&gt;&lt;a href="#setup.py"&gt;setup.py&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;After the description of all the aside helper files and folders (excluding the &lt;code&gt;booster&lt;/code&gt; sub-directory which is actually your
source code), created by the cookiecutter, we are now ready to dive in to the beast called &lt;code&gt;setup.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I will not go through the evolution of Python packaging because
&lt;a href="http://python-notes.curiousefficiency.org/en/latest/pep_ideas/core_packaging_api.html"&gt;Nick Coghlan has already posted about it&lt;/a&gt;.
A lot have changed and there is more to come.&lt;/p&gt;
&lt;p&gt;Briefly, this file is just a regular Python file which, at top, contains a very important &lt;code&gt;import&lt;/code&gt; statement:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;from setuptools import setup&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/pypa/setuptools/blob/master/setuptools/__init__.py#L140"&gt;setup&lt;/a&gt; function is the &lt;em&gt;beast&lt;/em&gt; we mentioned above. It serves two roles:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Describes the package (name, author, requirements, scripts etc)&lt;/li&gt;
&lt;li&gt;It's the tool you run to convert a package (full of source code) into an installable &amp;amp; distributable unit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using the electronic engineering terminology, you may say that this component is both active and passive,
depending on how you use it. More on this in a little bit.&lt;/p&gt;
&lt;p&gt;After the &lt;code&gt;import&lt;/code&gt; statement, a simple call to the &lt;code&gt;setup&lt;/code&gt; function is all you need. An example, using
our &lt;code&gt;booster&lt;/code&gt; package is shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;


&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;README.rst&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;readme_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;readme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;readme_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;HISTORY.rst&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;history_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;history_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;# Project information&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;booster&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.1.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Nick Mavrakis&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;nick@nick.gr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://github.com/manikos/booster/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 404, just an example&lt;/span&gt;
    &lt;span class="n"&gt;license&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MIT license&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="c1"&gt;# Description&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Extra functionality for Python strings.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;long_description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;readme&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;long_description_content_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/x-rst&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="c1"&gt;# Requirements&lt;/span&gt;
    &lt;span class="n"&gt;python_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;=3.6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="n"&gt;extras_require&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="c1"&gt;# install these with: pip install booster[test]&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;pytest&amp;gt;=3.8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;coverage&amp;gt;=4.5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;pytest-cov&amp;gt;=2.6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;tox&amp;gt;=3.3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;codecov&amp;gt;=2.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="c1"&gt;# Packaging&lt;/span&gt;
    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;find_packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;booster&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;booster.*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="n"&gt;include_package_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;zip_safe&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="c1"&gt;# Tests&lt;/span&gt;
    &lt;span class="n"&gt;test_suite&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tests&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="c1"&gt;# CLI&lt;/span&gt;
    &lt;span class="n"&gt;entry_points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;console_scripts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;transform=booster.cli:string_transform&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="c1"&gt;# Metadata&lt;/span&gt;
    &lt;span class="n"&gt;keywords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;string strings accent beautify&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;project_urls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Documentation&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://booster.readthedocs.io/en/latest/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Tracker&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://github.com/manikos/booster/issues/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;classifiers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Development Status :: 5 - Production/Stable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Intended Audience :: Developers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Topic :: Software Development :: Build Tools&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;License :: OSI Approved :: MIT License&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Natural Language :: English&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Programming Language :: Python :: 3 :: Only&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Programming Language :: Python :: 3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Programming Language :: Python :: 3.6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Programming Language :: Python :: 3.7&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, do not freak out. This is the present state of packaging in Python and believe it or not
it's better than ever. Also, if you think that this &lt;code&gt;setup.py&lt;/code&gt; file is confusing, have a look
at other Python libraries and then you may freak out!&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;setup&lt;/code&gt; function is called using keyword arguments (not positional ones). The whole list of these parameters
can be found in the &lt;a href="https://setuptools.readthedocs.io/en/latest/setuptools.html#new-and-changed-setup-keywords"&gt;setuptools docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Recalling the first role of &lt;code&gt;setup.py&lt;/code&gt; file above, calling this function, allows us to describe the package metadata, dependencies etc.
Recalling the second role of &lt;code&gt;setup.py&lt;/code&gt; file above, executing (through the shell) &lt;code&gt;python setup.py &amp;lt;command&amp;gt;&lt;/code&gt; allows us to
do things (build artifacts, wheels etc) with the package. The artifacts that may be generated using the CLI command,
contain (as text in specific dirs/files) the metadata, dependencies etc written inside the &lt;code&gt;setup&lt;/code&gt; function. So, these two
roles are, somehow, interconnected.&lt;/p&gt;
&lt;p&gt;You may now visit &lt;a href="https://pypi.org/"&gt;PyPI&lt;/a&gt; and pick a package which has both formats available for download (in the &lt;code&gt;Downloads&lt;/code&gt; section, on the left).
Download both archives (&lt;code&gt;.whl&lt;/code&gt; and &lt;code&gt;.tar.gz&lt;/code&gt;). Open the &lt;code&gt;.whl&lt;/code&gt; and inspect the &lt;code&gt;.dist-info/&lt;/code&gt; dir.
Open, also, the &lt;code&gt;setup.py&lt;/code&gt; file inside the &lt;code&gt;.tar.gz&lt;/code&gt; and see the call to the &lt;code&gt;setup()&lt;/code&gt; function.
You will find all the &lt;code&gt;setup()&lt;/code&gt; keyword-value items inside the &lt;code&gt;.dist-info/METADATA&lt;/code&gt; file.
I hope, by now, the two roles of &lt;code&gt;setup.py&lt;/code&gt; are now distinguished and understood.&lt;/p&gt;
&lt;p&gt;When you run &lt;code&gt;python setup.py sdist&lt;/code&gt; in order to create a source distribution (&lt;a href="#source-distribution-aka-sdist"&gt;we will talk about that&lt;/a&gt;)
and your &lt;code&gt;setup()&lt;/code&gt; is empty, then the script will run with no errors but your source distribution will be named &lt;code&gt;UNKNOWN&lt;/code&gt;
and you will get some nice warnings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;warning: check: missing required meta-data: name, url
warning: check: missing meta-data: either &lt;span class="o"&gt;(&lt;/span&gt;author and author_email&lt;span class="o"&gt;)&lt;/span&gt; or &lt;span class="o"&gt;(&lt;/span&gt;maintainer and maintainer_email&lt;span class="o"&gt;)&lt;/span&gt; must be supplied
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which are quite self-explanatory: at least pass the &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;author&lt;/code&gt; and &lt;code&gt;author_email&lt;/code&gt; as arguments to &lt;code&gt;setup&lt;/code&gt; function.
But, please, do not supply only these! This is just for demonstration purposes. You should be explicit about your package.&lt;/p&gt;
&lt;p&gt;Now, lets take a deep breath and dive in to the &lt;code&gt;setup&lt;/code&gt; basics.&lt;/p&gt;
&lt;h2 id="metadata"&gt;&lt;a href="#metadata"&gt;Metadata&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This section is named &lt;em&gt;Metadata&lt;/em&gt; but it's a kind of &lt;strong&gt;grouping&lt;/strong&gt;, of &lt;code&gt;setup&lt;/code&gt; function, in my head. No official docs call it
this way. Because, &lt;code&gt;setup&lt;/code&gt; contains a lot of keyword arguments I want to organize them into logical groups. Thus,
I give it the name of &lt;em&gt;Metadata&lt;/em&gt; to distinguish it from the other keywords. After all, it's the easy part.&lt;/p&gt;
&lt;p&gt;In this section, &lt;code&gt;setup(**kwargs)&lt;/code&gt;, the - pretty straightforward - keyword arguments contain the:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;: name of the package (what other users will &lt;code&gt;pip install&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;author&lt;/code&gt;: your name (after all you're the author)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;author_email&lt;/code&gt;: a contact email of yours&lt;/li&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt;: project's URL (usually a VCS url)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;license&lt;/code&gt;: a string declaring the license title (the full body is written in the &lt;code&gt;LICENSE&lt;/code&gt; file)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;description&lt;/code&gt;: a string containing a short/brief description of the package&lt;/li&gt;
&lt;li&gt;&lt;code&gt;long_description&lt;/code&gt;: a string with more details (usually the same as the &lt;code&gt;README&lt;/code&gt; file)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;long_description_content_type&lt;/code&gt;: one of &lt;code&gt;'text/plain'&lt;/code&gt;, &lt;code&gt;'text/x-rst'&lt;/code&gt; (default) or &lt;code&gt;'text/markdown'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keywords&lt;/code&gt;: just a list of strings (not used anywhere practically for the moment)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;project_urls&lt;/code&gt;: dictionary of &lt;code&gt;title: url&lt;/code&gt; key-value pairs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;classifiers&lt;/code&gt;: &lt;a href="https://pypi.org/classifiers/"&gt;a list of predefined strings&lt;/a&gt; to be used for
  filtering/searching when searching via the &lt;a href="https://pypi.org/"&gt;PyPI&lt;/a&gt; website&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Again, all of the above might be too much, but the cookiecutter has already pre-filled most of them for us with
sane defaults (actually the defaults are the &lt;a href="#structure"&gt;answers you gave through the console&lt;/a&gt;).
You may edit them, add new ones, delete some etc. These were, more or less, the easy-to-understand ones.&lt;/p&gt;
&lt;h2 id="requirements"&gt;&lt;a href="#kwarg_requirements"&gt;Requirements&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="install_requires"&gt;install_requires&lt;/h3&gt;
&lt;p&gt;We discussed earlier about environment reproduction using &lt;code&gt;requirements_dev.txt&lt;/code&gt; or &lt;code&gt;Pipfile&lt;/code&gt; or any other tool
you might use to resolve dependencies. But how about the dependencies of the project itself?
These are declared through the &lt;code&gt;install_requires&lt;/code&gt; keyword argument. It's a list of strings and contains all
the 3rd party libraries (if any) your project/library depends on. If your library depends on &lt;code&gt;foo&lt;/code&gt; Python
library, then inside the &lt;code&gt;install_requires&lt;/code&gt; list, the &lt;code&gt;'foo'&lt;/code&gt; string must be included, otherwise when the end-user
will &lt;code&gt;pip install &amp;lt;library_name&amp;gt;&lt;/code&gt; then the &lt;code&gt;foo&lt;/code&gt; library will not be installed resulting in an error when running
you package.&lt;/p&gt;
&lt;p&gt;Remember, the &lt;code&gt;requirements_dev.txt&lt;/code&gt; is used for &lt;code&gt;pip install -r requirements_dev.txt&lt;/code&gt; only (for development
purposes), while &lt;code&gt;install_requires&lt;/code&gt; is used only during the installation of the library (&lt;code&gt;pip install &amp;lt;library_name&amp;gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;You are allowed not to have a &lt;code&gt;requirements_dev.txt&lt;/code&gt; file at all. Also, if your project does not depend on other
libraries, the &lt;code&gt;install_requires&lt;/code&gt; may be omitted as well. But, if your project is dependent on other libraries
you must have the &lt;code&gt;install_requires&lt;/code&gt; inside the &lt;code&gt;setup&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;The best practice when you list dependencies is not to pin them (i.e &lt;code&gt;library==x.y&lt;/code&gt;) to a specific version.
Just specify the minimum major version and you're to go (i.e &lt;code&gt;"library&amp;gt;=x.y"&lt;/code&gt;). The reason for this practice
may be found &lt;a href="https://blog.miguelgrinberg.com/post/the-package-dependency-blues"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="python_requires"&gt;&lt;a href="#kwarg_python_requires"&gt;python_requires&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;python_requires&lt;/code&gt; &lt;a href="https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires"&gt;argument&lt;/a&gt;
specifies to the installer tool (&lt;a href="https://pypi.org/project/pip/"&gt;pip&lt;/a&gt;, &lt;a href="https://pypi.org/project/poetry/"&gt;poetry&lt;/a&gt; etc) under which Python
version this package may run. If, for example, you're working in a virtualenv with Python 3.6 interpreter and you want
to install a package named &lt;code&gt;foo&lt;/code&gt; which has declared &lt;code&gt;python_requires==2.7&lt;/code&gt;, then &lt;code&gt;pip&lt;/code&gt; will exit with an error message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;py_36_venv&lt;span class="o"&gt;)&lt;/span&gt; $ pip install foo  &lt;span class="c1"&gt;# foo is Python 2.7 compatible only&lt;/span&gt;
Could not find a version that satisfies the requirement foo &lt;span class="o"&gt;(&lt;/span&gt;from versions: &lt;span class="o"&gt;)&lt;/span&gt;
No matching distribution found &lt;span class="k"&gt;for&lt;/span&gt; foo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should fill this one since it prevents early running errors regarding Python versions.&lt;/p&gt;
&lt;h3 id="extras_require"&gt;&lt;a href="#kwarg_extras_require"&gt;extras_require&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is a handy way of installing additional packages by simply &lt;em&gt;enabling flags&lt;/em&gt;. Based on the &lt;a href="#setuppy"&gt;above&lt;/a&gt; &lt;code&gt;setup&lt;/code&gt;,
if I want to download this package and install &lt;em&gt;test&lt;/em&gt;-related packages only, then I would run &lt;code&gt;pip install booster[test]&lt;/code&gt;,
where &lt;code&gt;test&lt;/code&gt; (the name inside the brackets) is a key of the dictionary. This key maps to a list of dependencies and thus
by executing this command the test-related packages will be installed. You may have a ton of other &lt;em&gt;aside&lt;/em&gt; packages
grouped together under a single name (all these under this dictionary), i.e &lt;code&gt;"security": [...]&lt;/code&gt;.
A reminder though, do not confuse this requirement setting with the &lt;code&gt;install_requires&lt;/code&gt; one.
The former is (usually) for other developers while the latter is for the end user which will simply do &lt;code&gt;pip install booster&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="entry-points"&gt;&lt;a href="#kwarg_entry_points"&gt;Entry points&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is a handy feature of &lt;code&gt;setuptools&lt;/code&gt; which allows us to define CLI commands which when executed, certain
Python functions will run.&lt;/p&gt;
&lt;p&gt;For example suppose that inside the &lt;code&gt;booster/cli.py&lt;/code&gt; file, we have written the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# booster/cli.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;string_transform&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;string transformed!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and, recalling the &lt;code&gt;setup&lt;/code&gt; function &lt;a href="#setuppy"&gt;above&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;entry_points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;console_scripts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;transform=booster.cli:string_transform&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, once the package has been installed, opening a console we can simply write
&lt;code&gt;transform&lt;/code&gt; and the message &lt;code&gt;string transformed!&lt;/code&gt; will get printed on screen.&lt;/p&gt;
&lt;p&gt;What is happening, behind the scenes, is that &lt;code&gt;setuptools&lt;/code&gt; create an executable file
inside the &lt;code&gt;bin/&lt;/code&gt; directory of the &lt;code&gt;virtualenv&lt;/code&gt; dir (just like &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;wheel&lt;/code&gt; and other commands that
are available through the command line) which maps to the function(s) declared in the value of the
key &lt;code&gt;console_scripts&lt;/code&gt;, under the &lt;code&gt;entry_points&lt;/code&gt; dictionary.&lt;/p&gt;
&lt;p&gt;The string is composed of &lt;code&gt;"&amp;lt;cli_command_name&amp;gt;&lt;/code&gt;=&lt;code&gt;&amp;lt;python_dottted_path_to_module&amp;gt;&lt;/code&gt;:&lt;code&gt;&amp;lt;function_name&amp;gt;"&lt;/code&gt;.
Of course, the above function instead of printing something it can return something, accept parameters
(&lt;code&gt;transform &amp;lt;a string here&amp;gt; &amp;lt;another one&amp;gt;&lt;/code&gt;) etc. If you plan to have cli support then &lt;a href="https://click.palletsprojects.com/en/master/"&gt;Click&lt;/a&gt;
is a must-have library to do this kind of things.&lt;/p&gt;
&lt;h2 id="packaging"&gt;&lt;a href="#packaging_general"&gt;Packaging&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This will be the most hard-to-explain section, but I will do my best. You know, there are several
things in life where while you're trying to explain a single thing, another thing needs to be explained first and
then you realise that another thing needs to be explained first etc and at the end you forget what
you were trying to explain at the first place! Same rule applies here but I'll try to be consistent and not get lost.&lt;/p&gt;
&lt;p&gt;First of all, before talking about packaging, we must understand the available forms of packaging. Referring to the
&lt;a href="#warehouse_img"&gt;image at the beginning&lt;/a&gt;, Python packages come in two forms: wheels and source distributions (#3 on image).
It can also be seen from the image below:&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;figure style="display: flex; flex-direction: column; justify-content: center; align-items: center;"&gt;
  &lt;a name="packaging_formats_img"&gt;&lt;/a&gt;
    &lt;img id="packaging-formats" src="/images/a_tour_on_python_packaging/packaging_whl_tar.png" alt="Python Packaging Formats (sdist and wheel)"&gt;
    &lt;figcaption&gt;Python packaging formats: built distribution and source (wheel and sdist, respectively)&lt;/figcaption&gt;
&lt;/figure&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id="wheels-aka-built-distribution"&gt;&lt;a href="#wheel"&gt;Wheels (aka built distribution)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0427/"&gt;The wheel binary package format&lt;/a&gt; or &lt;em&gt;built distribution&lt;/em&gt;
or just &lt;em&gt;wheel&lt;/em&gt; is a way to package code into a redistributable way. The abstract of it's PEP, is quite comprehensive:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A wheel is a ZIP-format archive with a specially formatted file name and the &lt;code&gt;.whl&lt;/code&gt; extension.
It contains a single distribution nearly as it would be installed according to PEP 376 with a particular installation scheme.
Although a specialized installer is recommended, a wheel file may be installed by simply unpacking into site-packages
with the standard 'unzip' tool while preserving enough information to spread its contents out onto their final paths at any later time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words, instead of having a source distribution file that pip downloads, unpacks and runs "setup.py install",
the wheel format has things, effectively, in the format that they need to be when they are installed on the system.
So pip can just unpack the zip file (.whl) in a very specific way, but you don't actually have to run any code to do installs.
This means that installs are much faster and safer since you don't execute arbitrary code from the internet.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://packaging.python.org/guides/distributing-packages-using-setuptools/#wheels"&gt;Wheels come in three flavors&lt;/a&gt;:
universal, pure Python and platform. Because of its compiled extensions (C extensions), Numpy comes in platform wheels.
Take a minute and choose the appropriate distribution wheel. Simple rule of thumb: Does your package contains pure
Python code? If yes, choose either pure Python (does not support both Python 2 and 3) or universal (your package
does support both Python 2 and 3). If no, then you must go with platform wheel. No worries, though. The command
is the same in all options: &lt;code&gt;python setup.py bdist_wheel&lt;/code&gt;. The onle point of difference is inside the &lt;code&gt;setup.cfg&lt;/code&gt; file.
&lt;a href="#setupcfg"&gt;We will get to that&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Furthermore, wheel formats have another advantage. Their filename says a lot about the package. Have a minute and visit the
&lt;a href="https://pypi.org/project/numpy/#files"&gt;numpy downloadble file list&lt;/a&gt;. There is a whole list of different wheels
(the source distribution is at the bottom). Luckily, you don't have to choose one, download and install. &lt;code&gt;pip&lt;/code&gt;
will do it for you automatically, depending on your OS system, Python version etc. My point here is that the author
of the package has the ability to make the package installable on different platforms, Python versions etc, using
the wheel format. No chance with the source dist one.&lt;/p&gt;
&lt;p&gt;Visiting PyPI and examining some packages, you may see that not all packages have a wheel format. However, all of them
have a source distribution one. A good practice is to &lt;strong&gt;always generate both wheel and source distributions&lt;/strong&gt; each time
you upload a new version of your package.&lt;/p&gt;
&lt;p&gt;Now that we have explained what a wheel is, theoretically, lets build one for our booster package.
The command that builds a wheel is &lt;code&gt;python setup.py bdist_wheel&lt;/code&gt;. If you like, run &lt;code&gt;python setup.py bdist_wheel --help&lt;/code&gt;
to get a list of options applied to this command (most popular is &lt;code&gt;--universal&lt;/code&gt;).
If you get an error running this command, then your working Python environment has not the &lt;a href="https://pypi.org/project/wheel/"&gt;wheel&lt;/a&gt;
library installed (which is installed automatically every time you create a virtualenv using the &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; library).
You can see that using &lt;code&gt;setup.py&lt;/code&gt; this way, it acts as the 2nd role we described earlier (tool for handling packages etc).
Note that no code has been written yet inside the &lt;code&gt;booster/booster.py&lt;/code&gt; file.
It doesnt matter because at this point we're focusing on the package rather the contents of each file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; path/to/booster/
$ python setup.py bdist_wheel
running bdist_wheel
running build
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you examine the root &lt;code&gt;booster&lt;/code&gt; directory, you will see that three new directories have been created:
&lt;code&gt;booster.egg-info/&lt;/code&gt;, &lt;code&gt;build/&lt;/code&gt; and &lt;code&gt;dist/&lt;/code&gt;. Leave the first two folders intact and focus on the &lt;code&gt;dist&lt;/code&gt; one.
This would be the directory (although it's name may be changed, &lt;code&gt;-d&lt;/code&gt; option) where you'll place your wheels
and your source distributions as well. These two go together. Always. Remember that. wheel + sdist = BFF
like we wrote in the 90's.
The contents of the &lt;code&gt;.whl&lt;/code&gt; file are two folders: &lt;code&gt;booster/&lt;/code&gt; and &lt;code&gt;booster-0.1.0.dist-info/&lt;/code&gt;. If you paste
the &lt;code&gt;booster/&lt;/code&gt; folder into your virtualenv &lt;code&gt;site-packages&lt;/code&gt; folder, then &lt;code&gt;booster&lt;/code&gt; would be available in your
Python path (i.e you can do &lt;code&gt;import booster&lt;/code&gt;).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Aside fact #1: there is another way to build a wheel for your package (although, the above method
  should always be used). Once inside the root directory of the package run &lt;code&gt;pip wheel -w dist --no-deps .&lt;/code&gt;
  (this will create only a &lt;code&gt;dist/&lt;/code&gt; dir which includes the &lt;code&gt;.whl&lt;/code&gt; file).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aside fact #2: We have mentioned the &lt;a href="https://pypi.org/project/wheel/"&gt;wheel&lt;/a&gt; library but we have not used it yet. In fact you never
  have to play with it but you may install wheels through this library also. Again, this is not the recommended
  way. Once you have a wheel of your library, you may install it with &lt;code&gt;wheel install dist/booster-0.1.0-py2.py3-none-any.whl&lt;/code&gt;.
  Verify that by doing: &lt;code&gt;pip freeze | grep booster&lt;/code&gt;. There it is! But &lt;code&gt;wheel&lt;/code&gt; command has no uninstall procedure
  which signifies that this method is unsuitable for installing/uninstalling packages. To uninstall it run
  &lt;code&gt;pip uninstall booster&lt;/code&gt;. Press &lt;code&gt;y&lt;/code&gt; (for yes) and it's gone.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aside fact #3: Since &lt;code&gt;pip&lt;/code&gt; can install wheels, let's take a look of a manual way of doing that. Again, this is
  not the recommended way. Inside the root package run &lt;code&gt;pip install --no-index --find-links=. dist/booster-0.1.0-py2.py3-none-any.whl&lt;/code&gt;.
  Because the default behavior of &lt;code&gt;pip&lt;/code&gt; is to look for package in the PyPI index we tell it to not look at any (&lt;code&gt;--no-index&lt;/code&gt;)
  and advise it to look for packages in the current dir (&lt;code&gt;--find-links=.&lt;/code&gt;). Next follows the path of the wheel file.
  This works brilliantly but it's overkill to write all these every time!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aside fact #4: Enter developer mode. Or else &lt;code&gt;editable&lt;/code&gt; mode. When you develop your package, instead of
  &lt;code&gt;pip install&lt;/code&gt; it every time you make a change (or you want to examine a &lt;code&gt;print&lt;/code&gt; statement somewhere) you may
  symlink it and then all changes will be applied automatically. You can either do &lt;code&gt;python setup.py develop&lt;/code&gt;
  (which shows a verbose output) or &lt;code&gt;pip install -e .&lt;/code&gt; (where the dot at the end specifies the current working
  directory which is the project root one) which gives a suppressed output but pay close attention at it.
  It says &lt;code&gt;Running setup.py develop for booster&lt;/code&gt;. So, the same command is used.
  Anyhow, I prefer to use the latter (&lt;code&gt;pip install -e .&lt;/code&gt;) and I'm good to go.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aside fact #5: You may notice that wheels include only what's under your source code directory. Anything else
  outside will not be included (because, simply, it's not needed in order for your library to run). So, if your
  &lt;code&gt;MANIFEST.in&lt;/code&gt; file (we'll look at it &lt;a href="#manifestin"&gt;below&lt;/a&gt;) includes other dirs/files outside the &lt;code&gt;booster/&lt;/code&gt;
  root source directory, running &lt;code&gt;python setup.py bdist_wheel&lt;/code&gt;, the produced &lt;code&gt;.whl&lt;/code&gt; archive will not include those.
  However, it will include any dirs/files (written in the manifest) that are inside the &lt;code&gt;booster/&lt;/code&gt; root source dir.
  On the other hand, all the above are not valid for the &lt;code&gt;sdist&lt;/code&gt; distribution. In this format, almost everything
  are included in the &lt;code&gt;.tar.gz&lt;/code&gt; archive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aside fact #6: You may produce a wheel artifact out from an &lt;code&gt;sdist&lt;/code&gt;, but not the other way around.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aside fact #7: You might have heard of Python &lt;code&gt;.egg&lt;/code&gt; files. These kind of archives are considered obsolete.
  The official packaging docs state that &lt;a href="https://packaging.python.org/discussions/wheel-vs-egg/"&gt;wheels are now considered the standard&lt;/a&gt;.
  So, there is no need to worry about them. Consider &lt;code&gt;wheel&lt;/code&gt; the upgraded version of &lt;code&gt;egg&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="sdist-aka-source-distribution"&gt;&lt;a href="#sdist"&gt;Sdist (aka source distribution)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Source distribution (sdist for short) is actually a &lt;code&gt;.tar.gz&lt;/code&gt; file which contains not only the directory
where your code lives but also the other files (depending of the contents of &lt;code&gt;MANIFEST.in&lt;/code&gt; file)
inside the root directory of the package (such as &lt;code&gt;setup.py&lt;/code&gt;, &lt;code&gt;setup.cfg&lt;/code&gt; etc).
Some packages on PyPI either have only &lt;code&gt;sdist&lt;/code&gt;s, &lt;code&gt;wheel&lt;/code&gt;s or both. &lt;code&gt;pip&lt;/code&gt; will always prefer a &lt;code&gt;wheel&lt;/code&gt;
because it's faster and requires no compilation at all. In contrast, if &lt;code&gt;wheel&lt;/code&gt; file is missing,
&lt;code&gt;pip&lt;/code&gt; will download the sdist, run &lt;code&gt;python setup.py install&lt;/code&gt; and finally install the lib. Sdist
has all the information needed to build a wheel, install the library etc. That's why it's called
&lt;em&gt;source&lt;/em&gt; distribution.&lt;/p&gt;
&lt;p&gt;To build a sdist simply &lt;code&gt;python setup.py sdist&lt;/code&gt;. Note that this command will not create a &lt;code&gt;build/&lt;/code&gt; dir
like &lt;code&gt;bdist_wheel&lt;/code&gt; did earlier. It creates a &lt;code&gt;booster.egg-info/&lt;/code&gt; and a &lt;code&gt;dist/&lt;/code&gt; folder. Inside the &lt;code&gt;dist/&lt;/code&gt;
folder you can see the &lt;code&gt;.tar.gz&lt;/code&gt; archive which contains your package with all the accompanying dirs and
files.&lt;/p&gt;
&lt;p&gt;Of course, running &lt;code&gt;python setup.py sdist --help&lt;/code&gt; will show you the available options for the sdist argument.
There are other formats you can archive your package. &lt;code&gt;python setup.py sdist --help-formats&lt;/code&gt; to see the list.&lt;/p&gt;
&lt;p&gt;Usually, we do not run &lt;code&gt;python setup.py bdist_wheel&lt;/code&gt; and &lt;code&gt;python setup.py sdist&lt;/code&gt; individually. We combine
these commands into a single one &lt;code&gt;python setup.py bdist_wheel sdist&lt;/code&gt; (&lt;code&gt;bdist_wheel&lt;/code&gt; comes first in case you forget ;)
and any options on each argument (if any) are included in the &lt;code&gt;setup.cfg&lt;/code&gt; file. What? How &lt;code&gt;setup.py&lt;/code&gt; file gets the
options from the &lt;code&gt;setup.cfg&lt;/code&gt; file? We will look &lt;a href="#setupcfg"&gt;at it in a moment&lt;/a&gt; when we will talk about &lt;code&gt;setup.cfg&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In order to facilitate this process, the &lt;code&gt;Makefile&lt;/code&gt; (created by the cookiecutter) has a command called &lt;code&gt;dist&lt;/code&gt; which
first deletes the &lt;code&gt;build/&lt;/code&gt; dir, the &lt;code&gt;dist/&lt;/code&gt; dir, any hidden &lt;code&gt;.eggs/&lt;/code&gt; dir, any &lt;code&gt;.pyc&lt;/code&gt; files and other stuff and finally
runs &lt;code&gt;python setup.py bdist_wheel sdist&lt;/code&gt; in order to generate the new distribution pair of artifacts. Run it as
&lt;code&gt;make dist&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Reminder: Until now, we have talked about how to wrap your package into a format that can be uploaded to PyPI and
be distributed to the Python world. We have not talked about how to upload a package to PyPI or once uploaded
how to install it in your machine. We have talked about the number 3 referring to &lt;a href="#warehouse_img"&gt;the image on top&lt;/a&gt;. Although,
we have used &lt;code&gt;pip&lt;/code&gt; (#4) and &lt;code&gt;setuptools&lt;/code&gt; (#1).&lt;/p&gt;
&lt;h3 id="packages"&gt;&lt;a href="#kwarg_packages"&gt;Packages&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;packages&lt;/code&gt; keyword argument to &lt;code&gt;setup()&lt;/code&gt; function tells &lt;code&gt;setuptools&lt;/code&gt; where to look to find Python code.
It takes a list of strings declaring Python package names. We could, in our example, not used the
&lt;code&gt;find_packages&lt;/code&gt; function at all and instead write &lt;code&gt;setup(packages=["booster"])&lt;/code&gt; or use the &lt;code&gt;find_packages&lt;/code&gt;
without any parameters, &lt;code&gt;setup(packages=find_packages())&lt;/code&gt;. It would be exactly the same.
This argument (&lt;code&gt;packages&lt;/code&gt;), however, is important because if you got it wrong then your actual code will not be included inside
the distributable package (both the wheel and the sdist)!&lt;/p&gt;
&lt;p&gt;The handy function &lt;code&gt;find_packages&lt;/code&gt; is given some parameters and it looks for Python modules.
&lt;a href="https://setuptools.readthedocs.io/en/latest/setuptools.html#using-find-packages"&gt;setuptools docs for find_packages function&lt;/a&gt;
explain it very well:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Anyway, &lt;code&gt;find_packages()&lt;/code&gt; walks the target directory, filtering by inclusion patterns
and finds Python packages (any directory). Packages are only recognized if they include an &lt;code&gt;__init__.py&lt;/code&gt; file.
Finally, exclusion patterns are applied to remove matching packages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In our case, we have a single dir called &lt;code&gt;booster/&lt;/code&gt; and under it three Python modules
(&lt;code&gt;booster.py&lt;/code&gt;, &lt;code&gt;cli.py&lt;/code&gt; and &lt;code&gt;__init__.py&lt;/code&gt;). The &lt;code&gt;find_packages&lt;/code&gt; function is called without any arguments resulting
in including this dir into the distributable one. If, however, this dir was not a Python package (without the
&lt;code&gt;__init__.py&lt;/code&gt; module) then it will not be included by this function.&lt;/p&gt;
&lt;p&gt;Fire up a Python console and import &lt;code&gt;find_packages&lt;/code&gt; from &lt;code&gt;setuptools&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;

&lt;span class="n"&gt;find_packages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# [&amp;#39;booster&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, delete the &lt;code&gt;booster/__init__.py&lt;/code&gt; and run &lt;code&gt;find_packages&lt;/code&gt; again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;

&lt;span class="n"&gt;find_packages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# []&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It doesnt matter how many subpackages your main package have. The &lt;code&gt;find_packages&lt;/code&gt; function
will work recursively and find them all. However, if you have, say, a file named &lt;code&gt;config.json&lt;/code&gt;
or &lt;code&gt;config.yml&lt;/code&gt; or anything that does not have a &lt;code&gt;.py&lt;/code&gt; suffix and you want to include it, because
somewhere you parse it and use it, then &lt;code&gt;find_packages&lt;/code&gt; will not help you there.&lt;/p&gt;
&lt;p&gt;These kind of files are not Python ones and thus they are called &lt;em&gt;data files&lt;/em&gt;. There are many
scenarios on including those files and once again
&lt;a href="https://setuptools.readthedocs.io/en/latest/setuptools.html#including-data-files"&gt;setuptools docs for data files&lt;/a&gt;
have all these covered in an explicit fashion.&lt;/p&gt;
&lt;h3 id="zip_safe"&gt;&lt;a href="#kwarg_zip_safe"&gt;zip_safe&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To be really honest I don't quite comprehend this setting and to always play safe I set it on &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As per the &lt;a href="http://peak.telecommunity.com/DevCenter/setuptools#setting-the-zip-safe-flag"&gt;PEAK docs say about setuptools&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For maximum performance, Python packages are best installed as zip files.
Not all packages, however, are capable of running in compressed form, because they may expect
to be able to access either source code or data files as normal operating system files.
So, setuptools can install your project as a zipfile or a directory
and its default choice is determined by the project's zip_safe flag.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also &lt;a href="https://medium.com/@madumalt/python-setuptools-adding-non-code-files-to-a-package-804f9e914807"&gt;a post on medium&lt;/a&gt;
tries to explain &lt;code&gt;zip_safe&lt;/code&gt; option. Last but not least read this
&lt;a href="https://stackoverflow.com/questions/15869473/what-is-the-advantage-of-setting-zip-safe-to-true-when-packaging-a-python-projec"&gt;answer on StackOverflow about &lt;code&gt;zip_safe&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As I understand it, unless you know what you're doing keep &lt;code&gt;zip_safe=False&lt;/code&gt;. Most Python packages (small and big ones) have it &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="test_suite"&gt;&lt;a href="#kwarg_test_suite"&gt;test_suite&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This option, once again is covered by the &lt;a href="https://setuptools.readthedocs.io/en/latest/setuptools.html#test-build-package-and-run-a-unittest-suite"&gt;setuptools docs&lt;/a&gt;.
When set, then you'll be able to run &lt;code&gt;python setup.py test&lt;/code&gt; and the test suite will get initiated.&lt;/p&gt;
&lt;p&gt;In our example, the &lt;code&gt;test_suite&lt;/code&gt; keyword is set to the &lt;code&gt;tests/&lt;/code&gt; directory. That's it. Try to run &lt;code&gt;python setup.py test&lt;/code&gt; and
see the already written by the cookiecutter test run and succeed. Since we are using &lt;code&gt;pytest&lt;/code&gt; we can also run tests using
&lt;code&gt;pytest&lt;/code&gt; or &lt;code&gt;py.test&lt;/code&gt; or &lt;code&gt;python setup.py pytest&lt;/code&gt;.
If you get the error &lt;code&gt;E   ModuleNotFoundError: No module named 'booster'&lt;/code&gt; then you have not installed &lt;code&gt;booster&lt;/code&gt; in your virtualenv.
Do that first (&lt;code&gt;pip install -e .&lt;/code&gt;) and then rerun &lt;code&gt;pytest&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="setupcfg"&gt;&lt;a href="#setup.cfg"&gt;setup.cfg&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This file is not mandatory but most of the times comes in handy due to repetition of &lt;code&gt;setup.py&lt;/code&gt; command options.
It's an &lt;code&gt;ini&lt;/code&gt; file and describes how the &lt;code&gt;setup.py&lt;/code&gt; is going to run. Instead of doing &lt;code&gt;python setup.py bdist_wheel --universal&lt;/code&gt;,
you set this option inside the &lt;code&gt;setup.cfg&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# apply to the &amp;quot;setup.py bdist_wheel&amp;quot; command&lt;/span&gt;
&lt;span class="c1"&gt;# the universal option with a value of 1 (that is, set it to true)&lt;/span&gt;
&lt;span class="k"&gt;[bdist_wheel]&lt;/span&gt;
&lt;span class="na"&gt;universal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;[aliases]&lt;/span&gt;
&lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;pytest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A general practice is to list the available &lt;code&gt;setup.py&lt;/code&gt; commands with &lt;code&gt;python setup.py --help-commands&lt;/code&gt;
and for each command, list it's available options, i.e &lt;code&gt;python setup.py --help sdist&lt;/code&gt;. Then, if
you want an option to persist while you create &lt;code&gt;sdist&lt;/code&gt; formats, you write it down to &lt;code&gt;setup.cfg&lt;/code&gt; along
with it's corresponding value.&lt;/p&gt;
&lt;p&gt;However, this is not true for the &lt;code&gt;alias&lt;/code&gt; command. Although, the command is &lt;code&gt;python setup.py alias &amp;lt;alias_name&amp;gt; &amp;lt;alias_command&amp;gt;&lt;/code&gt;
the corresponding entry in the &lt;code&gt;setup.cfg&lt;/code&gt; is &lt;code&gt;[aliases]&lt;/code&gt;. Delete this section and save &lt;code&gt;setup.cfg&lt;/code&gt;.
Then run &lt;code&gt;python setup.py alias test pytest&lt;/code&gt;. This will write to the &lt;code&gt;setup.cfg&lt;/code&gt; the lines that you previously deleted.
The &lt;code&gt;[aliases]&lt;/code&gt; was added.&lt;/p&gt;
&lt;p&gt;There are other Python libraries, such as &lt;a href="https://github.com/c4urself/bump2version"&gt;bump2version&lt;/a&gt; (a library to manage your package's version) that
are &lt;em&gt;compatible&lt;/em&gt; with &lt;code&gt;setup.cfg&lt;/code&gt; and allow you to define their command options inside this file. Then, whenever
you run &lt;code&gt;bumpversion minor&lt;/code&gt; the file &lt;code&gt;setup.cfg&lt;/code&gt; will be read under the hood for any options defined.&lt;/p&gt;
&lt;p&gt;Another technique that gains popularity is to make the &lt;code&gt;setup.cfg&lt;/code&gt; fat and keep &lt;code&gt;setup.py&lt;/code&gt; thin. What is meant
by this is to put all the metadata inside the &lt;code&gt;setup.cfg&lt;/code&gt; so that the &lt;code&gt;setup.py&lt;/code&gt; will, eventually, consist of
the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It can't be any simpler! It's a matter of choice. I prefer to keep my balances and have them both
in a sane size.&lt;/p&gt;
&lt;p&gt;Nevertheless, it's a good idea to have &lt;code&gt;setup.cfg&lt;/code&gt; in place, in order not to forget certain options, since this file provides
defaults for the &lt;code&gt;setup.py&lt;/code&gt; script (in other words it describes how the &lt;code&gt;setup.py&lt;/code&gt; script behaves).&lt;/p&gt;
&lt;p&gt;A good read on this is the &lt;a href="https://docs.python.org/3/distutils/configfile.html"&gt;official python docs on distributing python modules (legacy version)&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="manifestin"&gt;&lt;a href="#manifest.in"&gt;MANIFEST.in&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This file defines everything else that needs to be included in your source distribution (not the wheel)
that isn't actually necessary for the code to run itself. In contrast to &lt;code&gt;setup.py&lt;/code&gt; file which defines
the code that's going to be executed, which code do I need to include, the requirements of the
project etc (where all these are for functional purposes), &lt;code&gt;MANIFEST.in&lt;/code&gt; file describes other
files/dirs you need to include in your source distribution (such as docs, tests, images, html files, examples etc).&lt;/p&gt;
&lt;p&gt;&lt;a href="#packages"&gt;As mentioned earlier&lt;/a&gt;, data files (anything other than &lt;code&gt;.py&lt;/code&gt; files) are not included by default
in your distributable package. To do so you must use the &lt;code&gt;include_package_data=True&lt;/code&gt; keyword argument
of the &lt;code&gt;setup()&lt;/code&gt; function and the script will read the &lt;code&gt;MANIFEST.in&lt;/code&gt; file and include all dirs/files
listed into the sdist one (and to the wheel if they are under the source root directory).&lt;/p&gt;
&lt;p&gt;So, the keyword arguments of &lt;code&gt;setup()&lt;/code&gt;: &lt;code&gt;include_package_data&lt;/code&gt;, &lt;code&gt;package_data&lt;/code&gt; and &lt;code&gt;exclude_package_data&lt;/code&gt; work together
with the &lt;code&gt;MANIFEST.in&lt;/code&gt; file in a combination fashion in order to determine what &lt;em&gt;other files&lt;/em&gt; are to be included in the &lt;code&gt;sdist&lt;/code&gt;
package format. In fact, any files that match &lt;code&gt;exclude_package_data&lt;/code&gt; patterns will be included in the &lt;code&gt;sdist&lt;/code&gt; format but
when the package gets installed on the system (&lt;code&gt;pip install package&lt;/code&gt;) they will be excluded from the installation.&lt;/p&gt;
&lt;p&gt;You may read more on the &lt;code&gt;MANIFEST.in&lt;/code&gt; file on the &lt;a href="https://docs.python.org/3/distutils/sourcedist.html#specifying-the-files-to-distribute"&gt;official Python docs about MANIFEST.in&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you find yourself lost with this kind of file (as I did in the beginning), &lt;a href="https://github.com/mgedmin/check-manifest"&gt;check-manifest&lt;/a&gt;
is very good tool that kind of &lt;em&gt;syncs&lt;/em&gt; version controlled dirs/files with the &lt;code&gt;sdist&lt;/code&gt; one.
It also recommends which files should be added to the &lt;code&gt;MANIFEST.in&lt;/code&gt; file.&lt;/p&gt;
&lt;h1 id="upload"&gt;&lt;a href="#upload"&gt;Upload&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Once you have your Python package wrapped in a distributable form (remember, &lt;strong&gt;both wheel and sdist&lt;/strong&gt;) then it's
time to share it. Your distributable ones, conventionally, live under the &lt;code&gt;dist/&lt;/code&gt; dir, in the same level as
&lt;code&gt;setup.py&lt;/code&gt; is. The place where all Python packages are stored is called &lt;a href="https://pypi.org/"&gt;PyPI&lt;/a&gt;.
Since, an image worth a thousand words, here you are:&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;figure style="display: flex; flex-direction: column; justify-content: center; align-items: center;"&gt;
  &lt;a name="packaging_upload_img"&gt;&lt;/a&gt;
    &lt;img id="packaging-upload" src="/images/a_tour_on_python_packaging/packaging_upload_twine.png" alt="Python Packaging upload on PyPI via twine"&gt;
    &lt;figcaption&gt;Python packaging upload on PyPI via twine&lt;/figcaption&gt;
&lt;/figure&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;The way to upload your goodies on PyPI is called &lt;a href="https://pypi.org/project/twine/"&gt;twine&lt;/a&gt;. However, in order to be absolutely sure
that your package can be installed and run correctly without errors, the &lt;a href="https://test.pypi.org/"&gt;testing PyPI server&lt;/a&gt; exists
to host (temporarily) packages and expose such errors (uploading, installation etc).&lt;/p&gt;
&lt;p&gt;So, before you upload you package to the official live PyPI server (the default one), test it first and then
upload it &lt;em&gt;officially&lt;/em&gt;. You'll need two different accounts; one for the testing and one for the default one.&lt;/p&gt;
&lt;p&gt;Both uploads use the same command and it's pretty straightforward:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# for the testing PyPI server&lt;/span&gt;
twine upload --repository-url https://test.pypi.org/legacy/ dist/*

&lt;span class="c1"&gt;# for the default PyPI server&lt;/span&gt;
twine upload dist/*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After each new version release of your package, it's a good idea to empty the &lt;code&gt;dist/&lt;/code&gt; directory
from previous ones. Also delete the &lt;code&gt;build/&lt;/code&gt; dir as well. As already been said above, the cookiecutter
has a command to help you with this, &lt;code&gt;make dist&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Important note #1: PyPI does not allow to upload an artifact with the same version. That is, if your uploaded
package version is &lt;code&gt;0.1.0&lt;/code&gt; and you discovered a minor bug (say a typo to a string, a minor one) and fix it
without change the version and try to upload it again, PyPI will complain with the following error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Uploading booster-0.1.0-py2.py3-none-any.whl
&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="p"&gt;|&lt;/span&gt;███████████████████████████████████████████████████████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;.94k/8.94k &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;00&lt;/span&gt;:01&amp;lt;&lt;span class="m"&gt;00&lt;/span&gt;:00, &lt;span class="m"&gt;5&lt;/span&gt;.84kB/s&lt;span class="o"&gt;]&lt;/span&gt;
HTTPError: &lt;span class="m"&gt;400&lt;/span&gt; Client Error: File already exists. See https://test.pypi.org/help/#file-name-reuse &lt;span class="k"&gt;for&lt;/span&gt; url: https://test.pypi.org/legacy/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fix that by increment the patch version part to &lt;code&gt;0.1.1&lt;/code&gt; and then upload it. Or wait for some feedback
from the users, gather some bugs and then update it. It depends on the scenario and how big these
bugs are.&lt;/p&gt;
&lt;p&gt;Important note #2: Every time you change a version you should log it inside the &lt;code&gt;HISTORY.rst&lt;/code&gt;
or the &lt;code&gt;CHANGELOG.rst&lt;/code&gt; file (if you have it). That's a good practice not only for documentation
tracking purposes but also for the end users who need to know what has changed since the previous
version.&lt;/p&gt;
&lt;h2 id="keyring"&gt;&lt;a href="#keyring"&gt;keyring&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After running the above command(s), &lt;code&gt;twine&lt;/code&gt; will ask your username and password. Instead of providing them
through the console each time, there is another way, the lazy one.&lt;/p&gt;
&lt;p&gt;Under your virtualenv install &lt;a href="https://pypi.org/project/keyring/"&gt;keyring&lt;/a&gt; (once again, you're using a virtualenv, don't you?),
&lt;code&gt;pip install keyring&lt;/code&gt;. Read the installation docs carefully because at some platforms, additional platform-specific
libraries might be needed. As it's docs say:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;keyring&lt;/code&gt; provides an easy way to access the system keyring service
from Python. It can be used in any application that needs safe password storage.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Before, &lt;code&gt;keyring&lt;/code&gt;, the &lt;a href="https://docs.python.org/3/distutils/packageindex.html#the-pypirc-file"&gt;recommended practice was to create a &lt;code&gt;.pypirc&lt;/code&gt; file&lt;/a&gt;
under your home directory and inside there write in plain text the username and password for
each index (test and default).&lt;/p&gt;
&lt;p&gt;Those days are gone and we may now be much more safe and cryptic.
Back to &lt;code&gt;keyring&lt;/code&gt;, run the following two commands (one at a time):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;keyring &lt;span class="nb"&gt;set&lt;/span&gt; https://test.pypi.org/legacy/ &amp;lt;your_testing_PyPI_username_here&amp;gt;
keyring &lt;span class="nb"&gt;set&lt;/span&gt; https://upload.pypi.org/legacy/ &amp;lt;your_default_PyPI_username_here&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each command will prompt you for your password. Enter it and you're good to go.&lt;/p&gt;
&lt;h2 id="installing-your-uploaded-package"&gt;&lt;a href="#installing-your-uploaded-package"&gt;Installing your uploaded package&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Once the package has been uploaded to the testing server, you may install it from there,
in a new and clean virtualenv. Create your testing virtualenv and then:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install --index-url https://test.pypi.org/simple/ &amp;lt;package_name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Confirm that installation produced no errors and that you can run your package
without any difficulties. In general, confirm that your package works as expected.&lt;/p&gt;
&lt;p&gt;Once done, you may upload it to the default PyPI server and then simply use the
famous simple command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install &amp;lt;package_name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Congratulations! If you have made it so far that means you are in position to
share your ideas with others and make the world a better place to live!&lt;/p&gt;
&lt;p&gt;Extra tip: Recall the keyword argument of the &lt;code&gt;setup&lt;/code&gt; function, &lt;code&gt;extras_require&lt;/code&gt;,
you may install additional packages/dependencies by just &lt;code&gt;pip install booster[test]&lt;/code&gt;,
where &lt;code&gt;test&lt;/code&gt; is a key of the dictionary.&lt;/p&gt;
&lt;h1 id="sum-up"&gt;&lt;a href="#sum-up"&gt;Sum up&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;If you're confused with all the above, which I admit, are a lot to learn (but easy ones)
in the first place, here are some advices in order to make your life easier:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a virtualenv.&lt;/li&gt;
&lt;li&gt;Try to separate the concerns. First focus on your package and make sure it works. Forget about packaging.&lt;/li&gt;
&lt;li&gt;Write documentation. No, docstrings are not enough! &lt;a href="#docs-authorsrst-contributingrst-historyrst-and-readmerst"&gt;We talked about it above&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Write tests. No more here to say. &lt;a href="#tests-and-toxini"&gt;We talked about it above&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Now it's time to think about wrapping your library to a package. Again, separation of concerns.&lt;/li&gt;
&lt;li&gt;Using a cookiecutter of your choice, try to fill/edit/delete each file produced. One at a time.&lt;/li&gt;
&lt;li&gt;Docs work with Sphinx? Tests pass? Package can be installed locally in developer mode? Works as expected?&lt;/li&gt;
&lt;li&gt;Create the archives (wheel and sdist)&lt;/li&gt;
&lt;li&gt;Upload first to testing PyPI and then to the default PyPI&lt;/li&gt;
&lt;li&gt;Enjoy and tell others what you have built.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I am repeating myself here (against the &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY&lt;/a&gt; discipline)
but it's for good:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Do not rush. One step at a time. Complete each step and then go to the next.
Maybe you create your own &lt;em&gt;steps&lt;/em&gt;, that's OK. But please try not to do things
simultaneously. The error lies in asynchronous human tasks. Be synchronous!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I am not saying that I succeeded the first time I try to build a Python package. I failed.
That's why I created this &lt;em&gt;kind of guide&lt;/em&gt;. You may fail too. But do not give up.
Enough with the advices and lessons learned.&lt;/p&gt;
&lt;p&gt;Now dive in and share your ideas with the Python community!&lt;/p&gt;
&lt;h1 id="resources"&gt;&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="python-packaging-related-videos"&gt;&lt;a href="#py_packaging_videos"&gt;Python packaging-related videos&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you are a video-person then the following list contains (maybe all) english-spoken
video conferences, since 2012, related to Python packaging.
They are listed from recent to older without making older videos stale
(except those talking about the &lt;code&gt;distutils&lt;/code&gt; package).
As a bonus, there is a small comment on each, by me, highlighting some points (if any) about the video.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=s5lJsFzv_iI"&gt;What does PEP 517 mean for packaging&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/takluyver"&gt;Thomas Kluyver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyCon UK 2019 (Cardiff, UK)&lt;/li&gt;
&lt;li&gt;A brief history on Python packaging. Talks about PEP 517, pyproject.toml and
    distinguish between frontend and backend of packaging.&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=P3dY3uDmnkU"&gt;Shipping your first Python package and automating future publishing&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/crwilcox"&gt;Chris Wilcox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyCon 2019 (Cleveland, Ohio)&lt;/li&gt;
&lt;li&gt;Not something new in comparison to other talks in the past.
    Ends with the automation of package deployment which is quite handy!&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=02aAZ8u3wEQ"&gt;The Black Magic of Python Wheels&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ehashman"&gt;Elana Hashman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyCon 2019 (Cleveland, Ohio)&lt;/li&gt;
&lt;li&gt;Focuses on building extension wheels (ones that include C code, not only Python),
    explains what &lt;a href="https://github.com/pypa/manylinux"&gt;manylinux&lt;/a&gt;, &lt;a href="https://github.com/pypa/auditwheel"&gt;auditwheel&lt;/a&gt;
    and symbol version (C specific) are.&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=OaBhcueqNqw"&gt;Dependency hell: a library author's guide&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Yanhui Li &amp;amp; &lt;a href="https://github.com/brianquinlan"&gt;Brian Quinlan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyCon 2019 (Cleveland, Ohio)&lt;/li&gt;
&lt;li&gt;Describes the problem of "dependecy hell" (diamond dependency) and recommends on using
    semantic versioning (&lt;a href="https://semver.org/"&gt;semver&lt;/a&gt;)&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=RQrZRFcbYM0"&gt;Packaging Django apps for distribution on PyPI&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/lgh2"&gt;Laura Hampton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;North Bay Python 2018 (Petaluma, California)&lt;/li&gt;
&lt;li&gt;Despite the Django-specific parts at the beginning,
    not something new to learn in comparison with the other talks&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Gt3Pkgsd0Tk"&gt;Can packaging improve Django deployments?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/keimlink"&gt;Markus Zapke-Gründemann&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DjangoCon Europe 2018 (Heidelberg, Germany)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip-tools&lt;/code&gt;, different Django project structure, &lt;code&gt;contraints.txt&lt;/code&gt;, &lt;code&gt;setup.cfg&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=QgZ7qv4Cd0Y"&gt;How to publish a package on PyPI&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/judy2k"&gt;Mark Smith&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyCon Australia 2018&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gitignore.io"&gt;gitignore.io&lt;/a&gt;, &lt;a href="https://choosealicense.com"&gt;choosealicense.com&lt;/a&gt;,
  &lt;a href="https://github.com/mgedmin/check-manifest"&gt;check-manifest&lt;/a&gt;, &lt;a href="https://github.com/pypa/pipenv"&gt;pipenv&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=AQsZsgJ30AE"&gt;Inside the Cheeseshop: How Python Packaging Works&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/di"&gt;Dustin Ingram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyCon 2018 (Cleveland, Ohio)&lt;/li&gt;
&lt;li&gt;Focus on packaging history and not on how to package your Python code. Good references, though.&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WdhYa--Cahk"&gt;Packaging Let’s Encrypt Lessons learned shipping Python code to hundreds of thousands of users&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/SwartzCr"&gt;Noah Swartz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyCon 2017 (Portland, Oregon)&lt;/li&gt;
&lt;li&gt;Focuses on Python Applications (&lt;a href="https://certbot.eff.org/"&gt;certbot&lt;/a&gt;) and problems encountered during
  development and production. Not a talk for Python libraries.&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=qOH-h-EKKac"&gt;Share your code! Python Packaging Without Complication&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tylerdave"&gt;Dave Forgac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyCon 2017 (Portland, Oregon)&lt;/li&gt;
&lt;li&gt;Not something new in comparison to the 2016 talks&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=ikT2i4I2LYY"&gt;The trends in choosing licenses in Python ecosystem&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/anweshadas"&gt;Anwesha Das&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyCon 2017 (Portland, Oregon)&lt;/li&gt;
&lt;li&gt;Learn about different types of licenses and best practices to license your project.&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=xSbezLCJ87E"&gt;Python Packaging - current state and overview&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Gandi24"&gt;Jakub Wasielak&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;EuroPython 2017 (Rimini, Italy)&lt;/li&gt;
&lt;li&gt;Learn a lot about &lt;code&gt;setup.py&lt;/code&gt; like &lt;a href="https://github.com/pypa/setuptools_scm"&gt;setuptools_scm&lt;/a&gt;, &lt;code&gt;extras_require&lt;/code&gt;, &lt;code&gt;setup.cfg&lt;/code&gt;
  &lt;code&gt;python setup.py install/develop&lt;/code&gt;, &lt;a href="https://www.devpi.net/"&gt;devpi.net&lt;/a&gt;
  and &lt;a href="https://www.python.org/dev/peps/pep-0440/"&gt;PEP 440 -- Version Identification and Dependency Specification&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=iLVNWfPWAC8"&gt;The Packaging Gradient&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mahmoud"&gt;Mahmoud Hashemi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyBay 2017 (San Francisco, California)&lt;/li&gt;
&lt;li&gt;Focuses more on packaging Python applications instead of Python libraries. Refers to &lt;a href="https://github.com/pantsbuild/pex"&gt;pex&lt;/a&gt;,
  &lt;a href="https://www.anaconda.com/"&gt;anaconda&lt;/a&gt;, &lt;a href="https://docs.python-guide.org/shipping/freezing/"&gt;freezers&lt;/a&gt; and other methods.
  Obsolete, regarding the command for upload to PyPI (uses &lt;code&gt;setup.py upload&lt;/code&gt;)&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Ai2l9V2Y5Kw"&gt;Confessions of a Python packaging noo&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ssaporta"&gt;Steven Saporta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyGotham 2017 (New York City)&lt;/li&gt;
&lt;li&gt;Learn about the different wheel types&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=5BqAeN-F9Qs"&gt;Shipping Software To Users With Python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/glyph"&gt;Glyph Lefkowitz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyCon 2016 (Portland, Oregon)&lt;/li&gt;
&lt;li&gt;Talks more on distributing Python applications and not Python libraries.
  Learn about not to install globally using &lt;code&gt;sudo&lt;/code&gt; and instead use &lt;code&gt;pip install --user package&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=nFozViwDWvY"&gt;Publish your code so others can use it in 5 easy steps&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/samastur"&gt;Marko Samastur&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyCon 2016 (Portland, Oregon)&lt;/li&gt;
&lt;li&gt;It's the same talk as of EuroPython 2016 so, more or less the same.&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=v_wFF2wEG_A"&gt;Warehouse - the future of PyPI&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nlhkabu"&gt;Nicole Harris&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyConFR 2016&lt;/li&gt;
&lt;li&gt;Focuses more on the &lt;em&gt;old&lt;/em&gt; PyPI and the birth of the new one (warehouse),
  learn about the &lt;a href="https://en.wikipedia.org/wiki/Bus_factor"&gt;bus factor&lt;/a&gt;, &lt;a href="https://www.pypa.io/en/latest/"&gt;PyPA&lt;/a&gt;,
  &lt;a href="https://packaging.python.org/"&gt;PyPUG&lt;/a&gt;, &lt;a href="https://wiki.python.org/psf/PackagingWG"&gt;PSF Packaging WG&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=gc9dkktg1gU"&gt;Publish your code so others can use it in 4 easy steps&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/samastur"&gt;Marko Samastur&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;EuroPython 2016 (Bilbao, Spain)&lt;/li&gt;
&lt;li&gt;It's kind of stale (uses &lt;code&gt;setup.py sdist upload&lt;/code&gt; instead of &lt;a href="https://pypi.org/project/twine/"&gt;twine&lt;/a&gt;)&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=osCJgs5UetU"&gt;What Python can learn from Haskell packaging&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domenkozar"&gt;Domen Kožar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;EuroPython 2016 (Bilbao, Spain)&lt;/li&gt;
&lt;li&gt;Talks about Haskell with a few referrals to Python&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=oE5iePv8nD8"&gt;Reinventing the &lt;code&gt;whl&lt;/code&gt;: New Developments in Upstream Python Packaging Ecosystem&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/njsmith/"&gt;Nathaniel Smith&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SciPy 2016 (Austin, Texas)&lt;/li&gt;
&lt;li&gt;Speaks about packaging Python applications, mostly, not Python libraries.
  Talks about the &lt;a href="https://pip.pypa.io/en/stable/reference/pip_install/#cmdoption-pre"&gt;pip install --pre &lt;package&gt;&lt;/a&gt;
  and the upcoming &lt;code&gt;pyproject.toml&lt;/code&gt; configuration file.&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=W8A2bOKPtJU"&gt;Rethinking packaging, development and deployment&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/domenkozar"&gt;Domen Kožar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyCon 2015 (Montréal, Canada)&lt;/li&gt;
&lt;li&gt;Talks about the &lt;a href="https://nixos.org/nixpkgs/manual/#python"&gt;nix&lt;/a&gt; project&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=UtFHIpNPMPA"&gt;Grug make fire! Grug make wheel!&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/freakboy3742"&gt;Russell Keith-Magee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyCon Australia 2014&lt;/li&gt;
&lt;li&gt;A little stale but you may learn about &lt;code&gt;setup.cfg&lt;/code&gt;, &lt;code&gt;MANIFEST&lt;/code&gt; and  &lt;code&gt;LICENCE&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=eLPiPHr6TVI"&gt;Python packaging simplified, for end users, app developers&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/paulproteus"&gt;Asheesh Laroia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyCon 2014 (Montréal, Canada)&lt;/li&gt;
&lt;li&gt;A bit of stale too, but you learn that &lt;code&gt;pip install -e .&lt;/code&gt; is the alias
  of &lt;code&gt;python setup.py develop&lt;/code&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=jOiAp3wtx18"&gt;What is coming in Python packaging&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/coderanger"&gt;Noah Kantrowitz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyCon 2014 (Montréal, Canada)&lt;/li&gt;
&lt;li&gt;Learn about the &lt;a href="https://warehouse.pypa.io/api-reference/json/"&gt;warehouse JSON API&lt;/a&gt;,
  &lt;a href="https://docs.python.org/3/library/ensurepip.html"&gt;ensurepip&lt;/a&gt;,
  &lt;a href="https://www.python.org/dev/peps/pep-0453/"&gt;PEP 453 -- Explicit bootstrapping of pip in Python installations&lt;/a&gt;
  and &lt;code&gt;wheel&lt;/code&gt;s&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=8Xrdt3-YVz4"&gt;Nobody Expects the Python Packaging Authority&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ncoghlan"&gt;Nick Coghlan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyCon Australia 2013&lt;/li&gt;
&lt;li&gt;Talks about the pre-PyPA era and packaging issues that prevent Python packaging from evolving.
  Great talk for historical reasons.&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=bwwf_HbEJQM"&gt;Sharing is Caring: Posting to the Python Package Index&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/lukesneeringer"&gt;Luke Sneeringer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyConUS 2012 (Santa Clara, California)&lt;/li&gt;
&lt;li&gt;Very good video but a bit of stale since he uses &lt;code&gt;distutils&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="python-packaging-related-podcasts"&gt;&lt;a href="#py_packaging_podcasts"&gt;Python packaging-related podcasts&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you want to put on your headphones and enjoy the listening about Python
packaging, then this list is for you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://testandcode.com/52"&gt;52: pyproject.toml : the future of Python packaging&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/brettcannon"&gt;Brett Cannon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;5 November 2018&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="python-packaging-related-articles"&gt;&lt;a href="#py_packaging_articles"&gt;Python packaging-related articles&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Searching for "python packaging" will give you a ton of results. I tried to minimize
this list of results and end up with the following articles. They are in chronological
order. This does not mean that older posts are obsolete.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://andrewsforge.com/article/python-new-package-landscape/"&gt;Python's new package landscape&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jambonrose"&gt;Andrew Pinkham&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;11 May 2018&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://snarky.ca/a-tutorial-on-python-package-building/"&gt;A tutorial on packaging up your Python code for PyPI&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/brettcannon"&gt;Brett Cannon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;28 October 2017&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hynek.me/articles/sharing-your-labor-of-love-pypi-quick-and-dirty/"&gt;Sharing your labor of love: PyPI quick and dirty&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hynek"&gt;Hynek Schlawack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;29 July 2013 (updated on 23 October 2017)&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://veekaybee.github.io/2017/09/26/python-packaging/"&gt;Alice in Python projectland&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/veekaybee"&gt;Vicki Boykis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;26 September 2017&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://brunorocha.org/python/publish-your-python-packages-easily-using-flit.html"&gt;Publish your Python packages easily using flit&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rochacbruno"&gt;Bruno Rocha&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;22 August 2017&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jakevdp.github.io/blog/2016/08/25/conda-myths-and-misconceptions/"&gt;Conda: Myths and misconceptions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jakevdp"&gt;Jake VanderPlas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;25 Aug 2016&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://glyph.twistedmatrix.com/2016/08/python-packaging.html"&gt;Python packaging is good now&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/glyph"&gt;Glyph Lefkowitz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;14 August 2016&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hynek.me/articles/testing-packaging/"&gt;Testing &amp;amp; Packaging&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hynek"&gt;Hynek Schlawack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;19 October 2015&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.ionelmc.ro/2014/06/25/python-packaging-pitfalls/"&gt;Python packaging pitfalls&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ionelmc"&gt;Ionel Cristian Mărieș&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;25 June 2014&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.miguelgrinberg.com/post/the-package-dependency-blues"&gt;The package dependency blues&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/miguelgrinberg"&gt;Miguel Grinberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2 Sep 2013&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://caremad.io/posts/2013/07/setup-vs-requirement/"&gt;setup.py vs requirements.txt&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dstufft"&gt;Donald Stuff&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;22 Jul 2013&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://python-notes.curiousefficiency.org/en/latest/pep_ideas/core_packaging_api.html"&gt;Incremental plans to improve Python packaging&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ncoghlan"&gt;Nick Coghlan&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://justin.abrah.ms/python/setuptools_lessons.html"&gt;6 things I learned about setuptools&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/justinabrahms"&gt;Justin Abrahms&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://packaging.python.org/tutorials/"&gt;PyPA tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://packaging.python.org/guides/"&gt;PyPA guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://setuptools.readthedocs.io/en/latest/"&gt;setuptools official docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="packaging"></category><category term="python"></category><category term="package"></category><category term="PyPI"></category></entry><entry><title>Leaving Webfaction</title><link href="https://alone-djangonaut.com/leaving-webfaction" rel="alternate"></link><published>2018-07-17T00:00:00+03:00</published><updated>2018-07-17T00:00:00+03:00</updated><author><name>Nick Mavrakis</name></author><id>tag:alone-djangonaut.com,2018-07-17:/leaving-webfaction</id><summary type="html">&lt;p&gt;Why I left the (excellent) Webfaction shared hosting service and just "moved on".&lt;/p&gt;</summary><content type="html">&lt;h2 id="when-i-was-young"&gt;When I was young&lt;/h2&gt;
&lt;p&gt;Five years ago (2013), when I made my first steps on Web Development, building localhost (dummy) projects I never thought of deployment or security issues.
That's the beauty of working locally. You think, write it down, convert it to code, run it and done. Job's done. But, I wanted to make my work available to the public.
What's the point of building a house, decorate it, paint it but with no guests at all? The point is to share. To evolve.&lt;/p&gt;
&lt;p&gt;I was building (still do) &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;-based websites and when the time had come to upload it somewhere I did a research.
Few players on the board for Python applications. My best bet back then (with no knowledge about web servers, security, redirects, static files handling etc) was to
rely on a shared hosting service. I had rejected virtual private services (VPS) since I had absolutely no idea about how to setup a server with a Django application.
Remember, it was 5 years ago, Django was at 1.6 release (if I recall correctly), I was just learning HTML, CSS, JS, Git etc and I had my app ready to deploy.
I wrote down on a paper all the possible solutions and finally concluded to &lt;a href="https://www.webfaction.com/"&gt;Webfaction&lt;/a&gt;. Price was (still is) $10/month.
Not bad for an &lt;em&gt;all included&lt;/em&gt; hosting service back then.&lt;/p&gt;
&lt;h2 id="webfaction"&gt;Webfaction&lt;/h2&gt;
&lt;p&gt;I signed up for an account, I read their documentation about &lt;a href="https://docs.webfaction.com/software/django/getting-started.html?highlight=django#getting-started-with-django/"&gt;launching a Django-based website&lt;/a&gt;
and I had, finally, a Django-powered website online! Of course, I had some problems at the beginning, like setting up SSL, setting up a git server and other things I don't quite recall.
But all of them fixed either by their excellent support team or by searching the vast sea of internet. So far so good.
But I knew I should make myself more independent than to be &lt;em&gt;enclosed&lt;/em&gt; inside Webfaction's system. Not because it was fancy and I had to learn it but because I wanted to.
I felt like it was a missing piece of my understanding about web development. You see, when you develop a Django application and you hit &lt;code&gt;./manage.py runserver&lt;/code&gt; you're invoking a server.
The concept of the &lt;em&gt;server&lt;/em&gt; is everywhere. I wanted to learn how it worked. How to setup a machine from zero to one hundred. I wanted to have full control of my machine. So, I decided to
leave Webfaction and move on a VPS service. That happened on early 2018.&lt;/p&gt;
&lt;h2 id="virtual-private-server"&gt;Virtual Private Server&lt;/h2&gt;
&lt;p&gt;Like previously, I had no idea what to do. I signed up on both &lt;a href="https://linode.com"&gt;Linode&lt;/a&gt; and &lt;a href="https://digitalocean.com/"&gt;DigitalOcean&lt;/a&gt; and followed some &lt;em&gt;getting started&lt;/em&gt; guides.
I read about how &lt;a href="https://www.nginx.com"&gt;nginx&lt;/a&gt; works, how it process a request, security issues, backup, email. Remember, I had no idea how to setup a Linux server machine and configure
it properly. An analogy would be like this: Webfaction is like a cookie-cutter house where you get a house full-equipped but with no access to some areas/places. On the other hand,
DigitalOcean is like the tools you need to build the house from the ground up. You have to saw the woods, to nail the floor, to connect the wires etc. All these by yourself.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hard but challenging.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fast forward to today, after two years reading about web servers (and still do), how to automate stuff using &lt;a href="https://www.ansible.com/"&gt;Ansible&lt;/a&gt;, how to secure my server and other
things as well (uWSGI, database, etc), I am in position to deploy a website with a hit of a button. That's a great improvement for me.&lt;/p&gt;
&lt;h2 id="going-serverless"&gt;Going serverless&lt;/h2&gt;
&lt;p&gt;This new kid on the block, has drawn my attention but I have not study it yet. &lt;a href="https://www.zappa.io/"&gt;Zappa&lt;/a&gt; is an interesting web service to look at. But we have time for this.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I wanted to point out the reasons that made me left a shared hosting service and joining a VPS one. I like the fact that I can &lt;code&gt;sudo apt-get install something&lt;/code&gt; and have full control
of my machine. Other don't like that. Respectable. Maybe in the future I'll leave this too and join a serverless web service. Who knows?
P.S: I have also tried &lt;a href="https://www.heroku.com"&gt;Heroku&lt;/a&gt; which is an amazing web service but I personally, do not like to much magic behind the scenes. I want things to be crystal clear
the moment they happen. One of the reasons I left Heroku too (but I have a couple of websites right now, powered by Heroku).&lt;/p&gt;</content><category term="Thoughts"></category><category term="webfaction"></category></entry><entry><title>How python's import machinery works</title><link href="https://alone-djangonaut.com/how-pythons-import-machinery-works" rel="alternate"></link><published>2018-01-22T00:00:00+02:00</published><updated>2018-01-22T00:00:00+02:00</updated><author><name>Nick Mavrakis</name></author><id>tag:alone-djangonaut.com,2018-01-22:/how-pythons-import-machinery-works</id><summary type="html">&lt;p&gt;Have you ever wondered what happens under the hood when you type &lt;code&gt;import my_package.my_module&lt;/code&gt;? This article enlightens some of the (pretty) complicated aspects of the python import machinery.&lt;/p&gt;</summary><content type="html">&lt;h1 id="glossary"&gt;Glossary&lt;/h1&gt;
&lt;p&gt;Let's begin with the &lt;a href="https://docs.python.org/3/glossary.html"&gt;basics&lt;/a&gt;. 
From now on when we say the word &lt;em&gt;python&lt;/em&gt; we mean python 3.6. Python 3 is the future and (who knows) python 4 will be the future of python 3 etc. 
Stop using python 2!&lt;/p&gt;
&lt;p&gt;I'll try to be concise and simple, although the documentation about &lt;a href="https://docs.python.org/3/tutorial/modules.html#modules"&gt;modules&lt;/a&gt; and 
&lt;a href="https://docs.python.org/3/tutorial/modules.html#packages"&gt;packages&lt;/a&gt; is pretty straight forward. Go ahead and take a look to either learn
what these concepts are or just refresh your memory.&lt;/p&gt;
&lt;h3 id="python-module"&gt;Python module&lt;/h3&gt;
&lt;p&gt;When we say &lt;em&gt;python module&lt;/em&gt; or just &lt;a href="https://docs.python.org/3/glossary.html#term-module"&gt;&lt;code&gt;module&lt;/code&gt;&lt;/a&gt; we mean a simple python file, i.e &lt;code&gt;models.py&lt;/code&gt; or &lt;code&gt;utils.py&lt;/code&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A module is a file containing Python definitions and statements. The file name is the module name with the suffix .py appended.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When you put a bunch of modules under a directory then this directory is called a &lt;em&gt;python package&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id="python-package"&gt;Python package&lt;/h3&gt;
&lt;p&gt;When we say &lt;em&gt;python package&lt;/em&gt; or simply just &lt;a href="https://docs.python.org/3/glossary.html#term-package"&gt;&lt;code&gt;package&lt;/code&gt;&lt;/a&gt; we mean a directory that contains one or more &lt;em&gt;modules&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Packages are a way of structuring Python’s module namespace by using “dotted module names”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Of course, a package may contain a bunch of other directories (packages) which themselves may contain a bunch of other modules mixed with other packages etc. You get the point.
That's how an application is structured. This, of course, does not apply to Python only but to every programming language out there.&lt;/p&gt;
&lt;p&gt;Now, a package may or may not contain a &lt;code&gt;__init.py__&lt;/code&gt; file which distinguishes it between a &lt;a href="https://docs.python.org/3/glossary.html#term-regular-package"&gt;&lt;code&gt;regular package&lt;/code&gt;&lt;/a&gt; and a 
&lt;a href="https://docs.python.org/3/glossary.html#term-namespace-package"&gt;&lt;code&gt;namespace package&lt;/code&gt;&lt;/a&gt;. But I'll not go into details with namespace packages because first of all I have never used
a namespaced package and second, this article assumes a regular package (the one which has a &lt;code&gt;__init__.py&lt;/code&gt; in it).&lt;/p&gt;
&lt;h1 id="project-setup"&gt;Project setup&lt;/h1&gt;
&lt;p&gt;The following (super simple) project setup is assumed throughout this article:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tmp/
  my_package/
    __init__.py
    my_module.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can follow along with this article by putting the above structure inside a directory, i.e your &lt;code&gt;~/tmp/&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;This is the content of &lt;code&gt;my_module.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;init called&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;caps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nothing fancy here. Super simple because we want to focus on the import system. Not classes, methods etc.&lt;/p&gt;
&lt;h1 id="the-easy-way"&gt;The easy way&lt;/h1&gt;
&lt;p&gt;From now on we will assume that the python interpreter is always enabled under the directory in which the above structure exists. No virtual environments.
I promised to keep it simple in order to get a grip on this import machinery monster.&lt;/p&gt;
&lt;p&gt;In my system, I have it under &lt;code&gt;~/tmp&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~&amp;gt; &lt;span class="nb"&gt;cd&lt;/span&gt; tmp
~/tmp&amp;gt; python3.6
Python &lt;span class="m"&gt;3&lt;/span&gt;.6.3 &lt;span class="o"&gt;(&lt;/span&gt;default, Dec  &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;2017&lt;/span&gt;, &lt;span class="m"&gt;22&lt;/span&gt;:10:01&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;span class="o"&gt;[&lt;/span&gt;GCC &lt;span class="m"&gt;5&lt;/span&gt;.4.0 &lt;span class="m"&gt;20160609&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; on linux
Type &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; or &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; more information.
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Side tip&lt;/em&gt;: You can change the interactive python prompt from the default one (&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;) to i.e &lt;code&gt;&amp;gt;&lt;/code&gt; with: &lt;code&gt;import sys; sys.ps1 = '&amp;gt; '&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dec&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;5.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;20160609&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;linux&lt;/span&gt;
&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ps1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;gt; &amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, if we type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;my_package&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;my_module&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;caps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;HELLO&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Import done! &lt;code&gt;MyClass&lt;/code&gt; instance created! &lt;code&gt;caps()&lt;/code&gt; method called! But you already know that. This is the first thing taught when you start learning python.&lt;/p&gt;
&lt;p&gt;Go get a coffee/chocolate/tea/beer because here comes the good part. The internals have not yet begun...&lt;/p&gt;
&lt;h1 id="the-dynamic-way"&gt;The dynamic way&lt;/h1&gt;
&lt;p&gt;There is another way to import a module (or package). Using the &lt;a href="https://docs.python.org/3/library/importlib.html#importlib.import_module"&gt;import_module&lt;/a&gt; method. 
Well, this is quite easy to understand and you're &lt;strong&gt;encouraged&lt;/strong&gt; to use it if you want to import things dynamically (instead of the old classic way of 
calling &lt;a href="https://docs.python.org/3/library/functions.html#__import__"&gt;&lt;code&gt;__import__()&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;importlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;import_module&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;import_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_package.my_module&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;caps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;HELLO&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As seen from above, we have named the module, returned by the &lt;code&gt;import_module&lt;/code&gt; method, as &lt;code&gt;my_module&lt;/code&gt;, the same as the module's name in order to be consistent.
We could have also name it i.e &lt;code&gt;mod&lt;/code&gt; (or whatever) but then we must do &lt;code&gt;obj = mod.MyClass()&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Now take a look at this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;importlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;import_module&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;import_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;my_module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my_package&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my_module&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What? But I have imported &lt;code&gt;my_package&lt;/code&gt;. Why the &lt;code&gt;my_module&lt;/code&gt; module cannot be found? Because, simply, it has not been loaded (imported). 
We should import it explicit just like we did in the previous example. When importing a package, it is not assumed that all other
sub-packages/sub-modules are imported too. This applies to all Python import mechanisms, not only to &lt;code&gt;import_module&lt;/code&gt; method.&lt;/p&gt;
&lt;h1 id="the-almost-manual-way"&gt;The (almost) manual way&lt;/h1&gt;
&lt;p&gt;Hang on. We haven't reach our goal to the pure manual way of importing things. 
Here is &lt;a href="https://stackoverflow.com/questions/67631/how-to-import-a-module-given-the-full-path#answer-43602557"&gt;another way&lt;/a&gt; of importing a 
module (or package) without the direct usage of &lt;a href="https://docs.python.org/3/library/importlib.html#importlib.import_module"&gt;import_module&lt;/a&gt; method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;importlib.util&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;spec_from_loader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;module_from_spec&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;importlib.machinery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SourceFileLoader&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spec_from_loader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my_package.my_module&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SourceFileLoader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my_package.my_module&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/home/nick/tmp/my_package/my_module.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;
&lt;span class="n"&gt;ModuleSpec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_package.my_module&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_frozen_importlib_external&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourceFileLoader&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7f877568fcc0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/nick/tmp/my_package/my_module.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__class__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__delattr__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__dict__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__dir__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__eq__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__format__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__ge__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__getattribute__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__gt__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__hash__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="s1"&gt;&amp;#39;__init__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__init_subclass__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__le__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__lt__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__module__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__ne__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__new__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__reduce__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__reduce_ex__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__repr__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="s1"&gt;&amp;#39;__setattr__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__sizeof__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__str__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__subclasshook__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__weakref__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_cached&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_set_fileattr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cached&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;has_location&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="s1"&gt;&amp;#39;loader&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;loader_state&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;origin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;parent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;submodule_search_locations&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;module_from_spec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my_package.my_module&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/home/nick/tmp/my_package/my_module.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__cached__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__file__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__loader__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__name__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__package__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__spec__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MyClass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__builtins__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__cached__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__file__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__loader__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__name__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__package__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__spec__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;[READER] Hey, wait mister. What are these? Looks more like &lt;a href="https://en.wikipedia.org/wiki/Klingon_language"&gt;Klingon language&lt;/a&gt; than Python!&lt;/p&gt;
&lt;p&gt;[ME] No, no. It does not. It is pretty self-explanatory once we start digging the python's import internals.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note that there is also another way (the pure manual way) to import a Python module but I keep it for last in order to stay with me till the end :)&lt;/p&gt;
&lt;hr&gt;

&lt;h1 id="import-machinerys-concept"&gt;Import machinery's concept&lt;/h1&gt;
&lt;p&gt;Python has a very nice abstraction-philosophy of thinking about how to import things. On the other hand someone else could say that this system is quite complicated. 
Nevertheless, the system comprises of finders, loaders, specifications, modules, caching and a conductor that orchestrates all these, 
named &lt;a href="https://docs.python.org/3/reference/import.html"&gt;&lt;code&gt;python import machinery&lt;/code&gt;&lt;/a&gt;. All these come to play whenever you type &lt;code&gt;import my_package&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At a glance, the job of the finders is to find (locate) the requested module. If the module can be found, a specification (for that module) is returned. This spec
is used by the loaders to &lt;em&gt;create the module&lt;/em&gt;, &lt;em&gt;initialize it&lt;/em&gt; and &lt;em&gt;execute it&lt;/em&gt;. If the module cannot be found, the classic &lt;a href="https://docs.python.org/3/library/exceptions.html#ModuleNotFoundError"&gt;&lt;code&gt;ModuleNotFoundError&lt;/code&gt;&lt;/a&gt; exception is raised.&lt;/p&gt;
&lt;h2 id="the-procedure"&gt;The procedure&lt;/h2&gt;
&lt;h3 id="1-sysmodules"&gt;1. &lt;code&gt;sys.modules&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Every time you import a module, the first thing searched is &lt;a href="https://docs.python.org/3/library/sys.html#sys.modules"&gt;&lt;code&gt;sys.modules&lt;/code&gt;&lt;/a&gt; dictionary. 
The keys are just plain strings which consist of module names (with or without the dotted path, which means that are either top-level modules or sub-modules) 
and the value is the actual &lt;a href="https://docs.python.org/3/library/types.html#types.ModuleType"&gt;&lt;code&gt;module&lt;/code&gt;&lt;/a&gt; itself. &lt;code&gt;sys.modules&lt;/code&gt; dict acts like a cache. 
If it's there, go get it. Do not instantiate the import cycle again.&lt;/p&gt;
&lt;p&gt;Let's have a look at the contents of &lt;code&gt;sys.modules&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;builtins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;builtins&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;sys&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sys&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;_frozen_importlib&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_frozen_importlib&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frozen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;_imp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_imp&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;_warnings&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_warnings&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;_thread&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_thread&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;_weakref&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_weakref&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;_frozen_importlib_external&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_frozen_importlib_external&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frozen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;_io&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;io&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;marshal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;marshal&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;posix&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;posix&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;zipimport&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;zipimport&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;encodings&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;encodings&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/encodings/__init__.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;codecs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;codecs&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/codecs.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;_codecs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_codecs&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;encodings.aliases&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;encodings.aliases&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/encodings/aliases.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;encodings.utf_8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;encodings.utf_8&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/encodings/utf_8.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;_signal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_signal&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;encodings.latin_1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;encodings.latin_1&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/encodings/latin_1.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;io&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;io&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/io.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/abc.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;_weakrefset&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_weakrefset&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/_weakrefset.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;site&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;site&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/site.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;os&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;os&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/os.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;errno&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;errno&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;stat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;stat&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/stat.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;_stat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_stat&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;posixpath&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;posixpath&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/posixpath.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;genericpath&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;genericpath&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/genericpath.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;os.path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;posixpath&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/posixpath.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;_collections_abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_collections_abc&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/_collections_abc.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;_sitebuiltins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_sitebuiltins&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/_sitebuiltins.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;sysconfig&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sysconfig&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/sysconfig.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;_sysconfigdata_m_linux_x86_64-linux-gnu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_sysconfigdata_m_linux_x86_64-linux-gnu&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/_sysconfigdata_m_linux_x86_64-linux-gnu.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;readline&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;readline&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/lib-dynload/readline.cpython-36m-x86_64-linux-gnu.so&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;atexit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;atexit&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;rlcompleter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rlcompleter&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/rlcompleter.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my_package.my_module&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;
&lt;span class="kc"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="mi"&gt;60&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Can you see &lt;code&gt;my_package.my_module&lt;/code&gt; in there? No? Good! That's because it has not been imported (yet) and not added to this dictionary. 
If you write &lt;code&gt;from my_package import my_module&lt;/code&gt; then:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Continue from previous example&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;my_package&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;my_module&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;builtins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;builtins&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;sys&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sys&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;_frozen_importlib&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_frozen_importlib&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;frozen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="c1"&gt;# ... same as before&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;my_package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my_package&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/home/nick/tmp/my_package/__init__.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;my_package.my_module&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my_package.my_module&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/home/nick/tmp/my_package/my_module.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my_package&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;
&lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my_package.my_module&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;
&lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="mi"&gt;62&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As seen from above, when we added the &lt;code&gt;import&lt;/code&gt; statement, two entries added to &lt;code&gt;sys.modules&lt;/code&gt;. The top-level module (which acts like a package) and the dotted path
to the module (&lt;code&gt;my_module.py&lt;/code&gt;) itself. Now, every other time we reference to &lt;code&gt;my_module&lt;/code&gt; it will be loaded from &lt;code&gt;sys.modules&lt;/code&gt;.&lt;br&gt;
The &lt;code&gt;import&lt;/code&gt; statement took care of all the internals and added it to &lt;code&gt;sys.modules&lt;/code&gt;, plus made it available to work with it. But how did all these happen? &lt;/p&gt;
&lt;p&gt;Enter import machinery!&lt;/p&gt;
&lt;h3 id="2-finders"&gt;2. Finders&lt;/h3&gt;
&lt;p&gt;If the module requested is not found in the &lt;code&gt;sys.modules&lt;/code&gt; dict, then the list &lt;a href="https://docs.python.org/3/reference/import.html#the-meta-path"&gt;&lt;code&gt;sys.meta_path&lt;/code&gt;&lt;/a&gt; arises. 
This list contains &lt;a href="https://github.com/python/cpython/blob/3.6/Lib/importlib/abc.py#L47"&gt;&lt;code&gt;meta path finder objects&lt;/code&gt;&lt;/a&gt;. Lets look at it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meta_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;_frozen_importlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BuiltinImporter&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;_frozen_importlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FrozenImporter&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;,&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;_frozen_importlib_external&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PathFinder&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The job of each one is to locate the requested module by returning the specification (we'll get to that) of the module or simply &lt;code&gt;None&lt;/code&gt;. The competent for that is the
&lt;a href="https://docs.python.org/3/library/importlib.html#importlib.abc.MetaPathFinder.find_spec"&gt;&lt;code&gt;find_spec&lt;/code&gt;&lt;/a&gt; method. This method is called first (for each &lt;code&gt;meta finder&lt;/code&gt;) whenever 
you &lt;code&gt;import&lt;/code&gt; something.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;from the &lt;a href="https://docs.python.org/3/reference/import.html#the-meta-path"&gt;docs&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;These finders are queried in order to see if they know how to handle the named module.
Meta path finders must implement a method called &lt;code&gt;find_spec()&lt;/code&gt; which takes three arguments: a name, an import path, and (optionally) a target module.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;a href="https://github.com/python/cpython/blob/3.6/Lib/importlib/_bootstrap.py#L689"&gt;&lt;code&gt;BuiltinImporter&lt;/code&gt;&lt;/a&gt; is used purely for builtin modules. You may ask which are
these modules. Lets take a look.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;builtin_module_names&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_ast&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_codecs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_collections&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_functools&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_imp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_io&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_locale&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_operator&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;_signal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_sre&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_stat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_string&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_symtable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_thread&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_tracemalloc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_warnings&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;_weakref&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;atexit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;builtins&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;errno&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;faulthandler&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;itertools&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;marshal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;posix&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pwd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sys&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xxsubtype&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;zipimport&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, every time you type &lt;code&gt;import sys&lt;/code&gt;, or &lt;code&gt;import itertools&lt;/code&gt; etc, the finder used to locate that module (remember, &lt;strong&gt;not to load it&lt;/strong&gt;) is the &lt;code&gt;BuiltinImporter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, comes the &lt;a href="https://github.com/python/cpython/blob/3.6/Lib/importlib/_bootstrap.py#L762"&gt;&lt;code&gt;FrozenImporter&lt;/code&gt;&lt;/a&gt; which is used to locate &lt;a href="https://wiki.python.org/moin/Freeze"&gt;frozen modules&lt;/a&gt;. 
We will not concern with that type of modules, though.&lt;/p&gt;
&lt;p&gt;Last but not least is the &lt;a href="https://github.com/python/cpython/blob/3.6/Lib/importlib/_bootstrap_external.py#L1055"&gt;&lt;code&gt;PathFinder&lt;/code&gt;&lt;/a&gt; which is responsible for locating any 
module/package not in the range of the previous two. More specifically, it handles modules that are located either on &lt;code&gt;sys.path&lt;/code&gt;, &lt;code&gt;sys.path_hooks&lt;/code&gt;, &lt;code&gt;sys.path_importer_cache&lt;/code&gt; or
the &lt;code&gt;__path__&lt;/code&gt; attribute on the package.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If &lt;code&gt;sys.meta_path&lt;/code&gt; processing reaches the end of its list without returning a spec, then a &lt;a href="https://docs.python.org/3/library/exceptions.html#ModuleNotFoundError"&gt;&lt;code&gt;ModuleNotFoundError&lt;/code&gt;&lt;/a&gt; is raised.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Imagine the above three (default) guys like persons with a flashlight, each looking at a specific locations to find a module. If all of them fail then either the package
exists but the finders are not looking in the correct location or the package does not exist at all. I think until here, all these are quite easy to understand.&lt;/p&gt;
&lt;p&gt;And one more thing: you can &lt;a href="https://docs.python.org/3/reference/import.html#import-hooks"&gt;extend&lt;/a&gt; this list writing your own &lt;code&gt;meta finder&lt;/code&gt; but more on this later.&lt;/p&gt;
&lt;p&gt;Lets dive deeper...&lt;/p&gt;
&lt;h4 id="21-spec-object"&gt;2.1 Spec object&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/importlib.html#importlib.machinery.ModuleSpec"&gt;Specification objects&lt;/a&gt; or just &lt;code&gt;spec objects&lt;/code&gt; are the meta data of 
&lt;a href="https://docs.python.org/3/library/types.html#types.ModuleType"&gt;modules&lt;/a&gt;. Every &lt;code&gt;module&lt;/code&gt; has a &lt;code&gt;spec&lt;/code&gt; because in order to import a module the
spec is required. Thus, every &lt;code&gt;module&lt;/code&gt; exposes a &lt;code&gt;__spec__&lt;/code&gt; attribute. Lets inspect one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;my_package&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__builtins__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__cached__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__file__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__loader__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__name__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__package__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__path__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__spec__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__spec__&lt;/span&gt;
&lt;span class="n"&gt;ModuleSpec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_frozen_importlib_external&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourceFileLoader&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7f9673ceee48&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/nick/tmp/my_package/__init__.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;submodule_search_locations&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/nick/tmp/my_package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__class__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__delattr__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__dict__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__dir__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__eq__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__format__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__ge__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__getattribute__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;__gt__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__hash__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__init__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__init_subclass__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__le__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__lt__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__module__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__ne__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__new__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;__reduce__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__reduce_ex__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__repr__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__setattr__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__sizeof__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__str__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__subclasshook__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__weakref__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;_cached&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_initializing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_set_fileattr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cached&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;has_location&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;loader&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;loader_state&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;origin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;parent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;submodule_search_locations&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;/home/nick/tmp/my_package/__init__.py&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;my_package&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;submodule_search_locations&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/nick/tmp/my_package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Examining the above code, we can see that the &lt;code&gt;spec&lt;/code&gt; (object of the &lt;code&gt;ModuleSpec&lt;/code&gt; class) of &lt;code&gt;my_package&lt;/code&gt; package has its own methods and attributes. 
One of the attributes it has is the &lt;code&gt;loader&lt;/code&gt;. The &lt;code&gt;loader&lt;/code&gt; indicates to the import machinery which loader to use while creating and executing the module.
Remember, until now the module has not yet been created. Only the &lt;code&gt;spec&lt;/code&gt;. From a spec derives a module.
There are other attributes as well, like &lt;code&gt;origin&lt;/code&gt; (name of the place from which the module is loaded, “builtin” for built-in modules and the filename for modules loaded from source.), 
&lt;code&gt;parent&lt;/code&gt; (fully-qualified name of the package) and &lt;code&gt;submodule_search_locations&lt;/code&gt; (list of strings for where to find submodules), all of which are useful to the importer.&lt;/p&gt;
&lt;p&gt;As you have guessed, if you import a module (and not a package) you will see that the &lt;code&gt;submodule_search_locations&lt;/code&gt; will be &lt;code&gt;None&lt;/code&gt; since the module is always the
&lt;em&gt;leaf in the tree&lt;/em&gt;. In technical terms, the module has no &lt;a href="https://docs.python.org/3/reference/import.html#__path__"&gt;&lt;code&gt;__path__&lt;/code&gt;&lt;/a&gt; attribute as opposed to a package.&lt;/p&gt;
&lt;p&gt;Conclusion: &lt;code&gt;spec&lt;/code&gt; objects hold valuable information about the creation of the &lt;code&gt;modules&lt;/code&gt;. &lt;code&gt;spec&lt;/code&gt; objects are needed to construct and import a &lt;code&gt;module&lt;/code&gt;. &lt;/p&gt;
&lt;h3 id="3-path-finder"&gt;3 Path Finder&lt;/h3&gt;
&lt;p&gt;Remember the list &lt;code&gt;sys.meta_path&lt;/code&gt; where there three default &lt;code&gt;meta path finder objects&lt;/code&gt; (aka &lt;code&gt;importers&lt;/code&gt;)? The most common scenario is where you import packages
and modules from within your project and also other modules not handled by the first two importers. So, the most busy guy is the last one. Let me introduce you
the &lt;a href="https://docs.python.org/3/reference/import.html#the-path-based-finder"&gt;&lt;code&gt;Path Based Finder&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Path Based Finder&lt;/code&gt; (PBF for short) can be imported (if you want to play with him) with different names. All of them are aliases.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;_frozen_importlib_external&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PathFinder&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;importlib._bootstrap_external&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PathFinder&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;importlib.machinery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PathFinder&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;
&lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;
&lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__class__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__delattr__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__dict__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__dir__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__eq__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__format__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__ge__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;__getattribute__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__gt__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__hash__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__init__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__init_subclass__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__le__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__lt__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;__module__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__ne__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__new__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__reduce__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__reduce_ex__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__repr__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__setattr__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;__sizeof__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__str__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__subclasshook__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__weakref__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_get_spec&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_legacy_get_spec&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;_path_hooks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_path_importer_cache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;find_module&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;find_spec&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;invalidate_caches&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All of them aliases. But, in my opinion I'll stay with the last import statement since I don't want to mess with the underscore prefix imports.&lt;/p&gt;
&lt;p&gt;Although, PBF seems like a smart guy, he doesn't know how to import anything. He needs help. Help from other guys. Now this may sound strange. Why
the PBF does not handle the &lt;em&gt;findings&lt;/em&gt; all by himself? Well, this is an implementation detail and maybe it is for good.&lt;/p&gt;
&lt;p&gt;All that PBF does is that he traverses the individual path entries, associating each of them with a &lt;code&gt;path entry finder&lt;/code&gt; that knows how to handle that particular kind of path.
Where are these &lt;em&gt;path entries&lt;/em&gt; and these &lt;em&gt;path entry finders&lt;/em&gt; you may ask. Well, the &lt;code&gt;sys&lt;/code&gt; package has one more time the answer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;path entry no1: &lt;a href="https://docs.python.org/3/library/sys.html#sys.path"&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;path entry no2: &lt;a href="https://docs.python.org/3/library/sys.html#sys.path_hooks"&gt;&lt;code&gt;sys.path_hooks&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;path entry no3: &lt;a href="https://docs.python.org/3/library/sys.html#sys.path_importer_cache"&gt;&lt;code&gt;sys.path_importer_cache&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;path entry no4: &lt;a href="https://docs.python.org/3/reference/import.html#__path__"&gt;&lt;code&gt;__path__&lt;/code&gt;&lt;/a&gt; attribute on package objects&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You all know the first one. It's a list of string defined by the environment variable &lt;code&gt;PYTHONPATH&lt;/code&gt; as well as from other mechanisms (virtualenvs etc). &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The second is another list consists of Path Entry Finders (PEF for short) callables. Different from the meta one we're talking about (PBF).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The third one is a dictionary, mapping locations (strings) to PEF objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The last one is the &lt;code&gt;spec.submodule_search_locations&lt;/code&gt; (or &lt;code&gt;my_package.__path__&lt;/code&gt;, if you like) which contains a list of strings indicating sub-modules/sub-packages locations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python36.zip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/lib-dynload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/site-packages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path_hooks&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;zipimport&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zipimporter&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;function FileFinder.path_hook.&amp;lt;locals&amp;gt;.path_hook_for_FileFinder at 0x7f9673dfa6a8&amp;gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path_importer_cache&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python36.zip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FileFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/encodings&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FileFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/encodings&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/lib-dynload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FileFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/lib-dynload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/site-packages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FileFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/site-packages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;/home/nick/tmp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FileFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/nick/tmp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/collections&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FileFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/collections&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;/home/nick/tmp/my_package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FileFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/nick/tmp/my_package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/importlib&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FileFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/importlib&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Feel a little lost with all these? Lets make a very brief recap to see where are we:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An import statement is encountered&lt;/li&gt;
&lt;li&gt;Is the preferred imported name in &lt;code&gt;sys.modules&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;If yes import it, done!&lt;/li&gt;
&lt;li&gt;If not, call &lt;code&gt;find_spec()&lt;/code&gt; on each &lt;code&gt;sys.meta_path&lt;/code&gt; importer and wait for a &lt;code&gt;spec&lt;/code&gt;  &lt;strong&gt;&amp;larr; this is where we are!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;If no &lt;code&gt;spec&lt;/code&gt; returned, raise &lt;code&gt;ModuleNotFoundError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If a &lt;code&gt;spec&lt;/code&gt; returned, create the module (have not talk about it yet)&lt;/li&gt;
&lt;li&gt;Once the module is created, initialize it with default attributes&lt;/li&gt;
&lt;li&gt;Add it to &lt;code&gt;sys.modules&lt;/code&gt; (aka add it to cache)&lt;/li&gt;
&lt;li&gt;Execute the module&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Lets continue!&lt;/p&gt;
&lt;p&gt;In order to find what are the above &lt;code&gt;path entries&lt;/code&gt; and how they are related to the PEF, we must take a look at the 
&lt;a href="https://github.com/python/cpython/blob/3.6/Lib/importlib/_bootstrap_external.py#L11500"&gt;&lt;code&gt;find_spec()&lt;/code&gt;&lt;/a&gt; implementation of the
last meta path finder in the &lt;code&gt;sys.meta_path&lt;/code&gt; list, &lt;a href="https://github.com/python/cpython/blob/3.6/Lib/importlib/_bootstrap_external.py#L1055"&gt;&lt;code&gt;PathFinder&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_path_hooks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Search sys.path_hooks for a finder for &amp;#39;path&amp;#39;.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path_hooks&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path_hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;_warnings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sys.path_hooks is empty&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;ImportWarning&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;hook&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path_hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;hook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_path_importer_cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Get the finder for the path entry from sys.path_importer_cache.&lt;/span&gt;
&lt;span class="sd"&gt;       If the path entry is not in the cache, find the appropriate finder&lt;/span&gt;
&lt;span class="sd"&gt;       and cache it. If no finder is available, store None.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;FileNotFoundError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# Don&amp;#39;t cache the failure as the cwd can easily change to&lt;/span&gt;
            &lt;span class="c1"&gt;# a valid directory later on.&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;finder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path_importer_cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;finder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_path_hooks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path_importer_cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;finder&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;finder&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_get_spec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Find the loader or namespace_path for this module/package name.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# [...]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;finder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_path_importer_cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;finder&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;finder&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;find_spec&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;finder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_spec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_legacy_get_spec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;finder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;
            &lt;span class="c1"&gt;# other stuff here [...]&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_bootstrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModuleSpec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;submodule_search_locations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namespace_path&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_spec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Try to find a spec for &amp;#39;fullname&amp;#39; on sys.path or &amp;#39;path&amp;#39;.&lt;/span&gt;
&lt;span class="sd"&gt;       The search is based on sys.path_hooks and sys.path_importer_cache.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;
    &lt;span class="n"&gt;spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_spec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;namespace_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;submodule_search_locations&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;namespace_path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# We found at least one namespace path.  Return a&lt;/span&gt;
            &lt;span class="c1"&gt;#  spec which can create the namespace package.&lt;/span&gt;
            &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;namespace&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;submodule_search_locations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_NamespacePath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespace_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_get_spec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Take a minute to navigate yourself to these pretty self-explained methods. It all starts from the
&lt;code&gt;find_spec('my_package.my_module', path=['/home/nick/tmp/my_package/my_module.py'])&lt;/code&gt; call.&lt;/p&gt;
&lt;p&gt;Done?&lt;/p&gt;
&lt;p&gt;OK, lets look at these together. Note, you're looking at the &lt;em&gt;meat&lt;/em&gt; of how python locates modules in a filesystem.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If a &lt;code&gt;path&lt;/code&gt; is not passed to &lt;code&gt;find_spec&lt;/code&gt; then the &lt;code&gt;sys.path&lt;/code&gt; is used. &lt;/li&gt;
&lt;li&gt;The &lt;code&gt;_get_spec()&lt;/code&gt; is called.&lt;/li&gt;
&lt;li&gt;For each &lt;code&gt;path entry&lt;/code&gt; in the list of paths (either &lt;code&gt;sys.path&lt;/code&gt; or the passed &lt;code&gt;path&lt;/code&gt; parameter) the &lt;code&gt;_path_importer_cache()&lt;/code&gt; is called with this entry.&lt;/li&gt;
&lt;li&gt;As said above, the &lt;code&gt;sys.path_importer_cache&lt;/code&gt; is a dictionary and acts like a cache (as the name implies). The &lt;code&gt;_path_importer_cache()&lt;/code&gt; method returns 
the value (the Path Entry Finder - &lt;a href="https://docs.python.org/3/library/importlib.html#importlib.machinery.FileFinder"&gt;&lt;code&gt;FileFinder&lt;/code&gt;&lt;/a&gt;, if you recall) if a value is found for that path. &lt;/li&gt;
&lt;li&gt;If the cache fails, then a new Path Entry Finder &lt;em&gt;tries&lt;/em&gt; to be created (we're inside the &lt;code&gt;_path_hooks()&lt;/code&gt; method now) and returned. &lt;/li&gt;
&lt;li&gt;If that fails too, then &lt;code&gt;None&lt;/code&gt; is returned and the &lt;code&gt;sys.path_importer_cache&lt;/code&gt; gets updated with the key as the &lt;em&gt;failed&lt;/em&gt; path and the value as &lt;code&gt;None&lt;/code&gt;. So, next time the 
same path is tried to imported, the cache will get queried, &lt;code&gt;None&lt;/code&gt; will return and a &lt;code&gt;ModuleNotFoundError&lt;/code&gt; gets raised.&lt;/li&gt;
&lt;li&gt;If the creation (initialization, to be more accurate) of the new PEF succeeds (&lt;code&gt;try&lt;/code&gt; block of the &lt;code&gt;_path_hooks&lt;/code&gt; method) then this PEF for this path is stored in the cache 
(we are inside the &lt;code&gt;_path_importer_cache&lt;/code&gt; method now).&lt;/li&gt;
&lt;li&gt;(back to &lt;code&gt;_get_spec&lt;/code&gt; method) the &lt;code&gt;find_spec&lt;/code&gt; method is called. If this fails, then &lt;code&gt;continue&lt;/code&gt; to next path. If spec found and the spec has a &lt;code&gt;loader&lt;/code&gt;, return it.&lt;/li&gt;
&lt;li&gt;Finally, if the &lt;code&gt;path&lt;/code&gt; list reaches the end without a result (we're still inside the &lt;code&gt;_get_spec&lt;/code&gt; method), the &lt;code&gt;else&lt;/code&gt; clause (of the &lt;code&gt;for&lt;/code&gt; loop) is executed and a new &lt;code&gt;spec&lt;/code&gt; is created 
without a loader. Just an empty &lt;code&gt;ModuleSpec&lt;/code&gt; object. This object is returned.&lt;/li&gt;
&lt;li&gt;Because this &lt;code&gt;ModuleSpec&lt;/code&gt; object has no loader associated with and the &lt;code&gt;submodule_search_locations&lt;/code&gt; attribute is an empty list, &lt;code&gt;None&lt;/code&gt; will be returned by the &lt;code&gt;find_spec&lt;/code&gt; method.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I want to make clear that a spec is a totally different thing than a finder. A finder is just responsible for &lt;em&gt;finding&lt;/em&gt; paths, locations, files, URLs, etc. For example, the FileFinder
is responsible to locate paths that interact with the file system. Not URLs. Neither database queries. Just plain strings, i.e &lt;code&gt;/path/to/a/location&lt;/code&gt; that represent a valid file system
path. A custom Finder could be made to &lt;em&gt;interpret&lt;/em&gt; other locations, i.e a RedisFinder that can locate redis based urls.&lt;/p&gt;
&lt;p&gt;On the other hand, a spec is created given a set of parameters (&lt;code&gt;location&lt;/code&gt;, &lt;code&gt;loader&lt;/code&gt;, &lt;code&gt;submodule_search_location&lt;/code&gt;). The real creation of the spec, the place where the initialization of
the &lt;code&gt;types.ModuleSpec()&lt;/code&gt; takes place, is just a plain function in the python's source code and its name is &lt;a href="https://github.com/python/cpython/blob/3.6/Lib/importlib/_bootstrap_external.py#L524"&gt;&lt;code&gt;spec_from_file_location&lt;/code&gt;&lt;/a&gt;. 
There is also another place where the &lt;code&gt;ModuleSpec()&lt;/code&gt; get called, inside the &lt;code&gt;_get_spec()&lt;/code&gt; method as well. &lt;/p&gt;
&lt;p&gt;Am I too explicit of describing things and got lost (again)? Here is a short version of the above:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;There are two default Path Entry Finders (&lt;code&gt;sys.path_hooks&lt;/code&gt;, the &lt;code&gt;zipimporter&lt;/code&gt; and the &lt;code&gt;FileFinder&lt;/code&gt;, actually the first one is a class and the second is a &lt;a href="https://github.com/python/cpython/blob/3.6/Lib/importlib/_bootstrap_external.py#L1322"&gt;callable&lt;/a&gt;) 
which used by the Path Based Finder (&lt;code&gt;PathFinder&lt;/code&gt;). However, this list can be extended. For example you may make an &lt;code&gt;HttpFinder&lt;/code&gt; that is 
&lt;a href="https://youtu.be/0oTh1CXRaQ0?t=2h50m32s"&gt;able to locate modules through URLs&lt;/a&gt;, along with the associated &lt;code&gt;loader&lt;/code&gt; of course.&lt;/li&gt;
&lt;li&gt;Python, has already populated a cache with most common paths for you, inside the &lt;code&gt;sys.path_importer_cache&lt;/code&gt; dict. Most of them are assigned to the &lt;code&gt;FileFinder&lt;/code&gt; and some to &lt;code&gt;None&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the package you're trying to import is not inside the &lt;code&gt;path&lt;/code&gt; list parameter passed to &lt;code&gt;find_spec&lt;/code&gt; then, I'm sorry buddy but you'll get an error!&lt;/li&gt;
&lt;li&gt;Next time you try to import the same package, unless no changes have been made to &lt;code&gt;sys.path&lt;/code&gt; or &lt;code&gt;sys.path_importer_cache&lt;/code&gt;, you'll get the same error because this path has been &lt;em&gt;black listed&lt;/em&gt;
inside the &lt;code&gt;sys.path_importer_cache&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some hints:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are two &lt;code&gt;find_spec&lt;/code&gt; methods. One implemented by the &lt;a href="https://github.com/python/cpython/blob/3.6/Lib/importlib/_bootstrap_external.py#L1150"&gt;&lt;code&gt;PathFinder&lt;/code&gt;&lt;/a&gt; (the meta one or the Path Based Finder, if you like this name) 
and the other by the &lt;a href="https://github.com/python/cpython/blob/3.6/Lib/importlib/_bootstrap_external.py#L1233"&gt;&lt;code&gt;FileFinder&lt;/code&gt;&lt;/a&gt; (one of the Path Entry Finders, the other one is the zipimporter).&lt;/li&gt;
&lt;li&gt;Python calls &lt;code&gt;PathFinder&lt;/code&gt;'s &lt;code&gt;find_spec&lt;/code&gt; which implicit calls &lt;code&gt;Filefinder&lt;/code&gt;'s &lt;code&gt;find_spec&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Nevertheless, the &lt;code&gt;find_spec&lt;/code&gt; will return either a spec or &lt;code&gt;None&lt;/code&gt;. Period.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that we have an idea what a Finder is, lets play with that guy and try to load a spec, using different ways.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meta_path&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;_frozen_importlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BuiltinImporter&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;_frozen_importlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FrozenImporter&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;_frozen_importlib_external&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PathFinder&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meta_path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path_importer_cache&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python36.zip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FileFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/encodings&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FileFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/encodings&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/lib-dynload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FileFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/lib-dynload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/site-packages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FileFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/site-packages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;/home/nick/tmp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FileFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/nick/tmp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/collections&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FileFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/collections&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path_importer_cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/nick/tmp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# now when I try to find the spec for &amp;quot;my_package&amp;quot;, the cache will not find it and the&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# import mechanism will start.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_spec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ModuleSpec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_frozen_importlib_external&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourceFileLoader&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7ff3f060fcf8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/nick/tmp/my_package/__init__.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;submodule_search_locations&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/nick/tmp/my_package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# found it and the cache has been updated&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/home/nick/tmp&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path_importer_cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Let&amp;#39;s prevent it from locating our package!&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path_importer_cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/nick/tmp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python36.zip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/lib-dynload&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6/site-packages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# the first element, &amp;#39;&amp;#39; (empty string), searches, by default, to the current working directory&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# We have removed all potential references of our current working directory. Lets see now&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_spec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# yeah! None returned!&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Lets add it back&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/nick/tmp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# the same as ...append(&amp;#39;&amp;#39;) or sys.path.insert(0, &amp;#39;&amp;#39;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_spec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ModuleSpec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_frozen_importlib_external&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourceFileLoader&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7ff3f060fcf8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/nick/tmp/my_package/__init__.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;submodule_search_locations&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/nick/tmp/my_package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="4-loaders"&gt;4. Loaders&lt;/h3&gt;
&lt;p&gt;The hard part is to find the spec. If the spec is found, things are quite easy. You can find the pseudo code of a loader &lt;a href="https://docs.python.org/3/reference/import.html#loading"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In a sense, the loader uses the spec to create the module. Most of the times this will return &lt;a href="https://github.com/python/cpython/blob/3.6/Lib/importlib/_bootstrap_external.py#L669"&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; 
and the &lt;code&gt;module&lt;/code&gt; will be created using the default semantics. What that, exactly means? It means that the &lt;a href="https://github.com/python/cpython/blob/3.6/Lib/importlib/_bootstrap.py#L504"&gt;&lt;code&gt;_init_module_attrs&lt;/code&gt;&lt;/a&gt; 
takes place and &lt;a href="https://docs.python.org/3/reference/import.html#import-related-module-attributes"&gt;the module object gets &lt;em&gt;filled&lt;/em&gt; with the appropriate attributes&lt;/a&gt;.
Continuing, after the module is &lt;em&gt;created&lt;/em&gt;, it has to be added to the &lt;code&gt;sys.modules&lt;/code&gt; (recall this dict, it's the first cache that gets queried when an &lt;code&gt;import&lt;/code&gt; statement is encountered) and finally 
get &lt;a href="https://github.com/python/cpython/blob/3.6/Lib/importlib/_bootstrap_external.py#L672"&gt;executed&lt;/a&gt;. Done! Your module, after a long journey, can now be used by the programmer, you!&lt;/p&gt;
&lt;p&gt;Have you noticed the &lt;em&gt;secret sauce&lt;/em&gt; when you import a package or module? It's &lt;a href="https://github.com/python/cpython/blob/3.6/Lib/importlib/_bootstrap_external.py#L678"&gt;this line exactly&lt;/a&gt; 
(inside the &lt;code&gt;exec_module&lt;/code&gt; method of the &lt;code&gt;_LoaderBasics&lt;/code&gt; class, where the &lt;a href="https://github.com/python/cpython/blob/3.6/Lib/importlib/_bootstrap_external.py#L836"&gt;&lt;code&gt;SourceFileLoader&lt;/code&gt;&lt;/a&gt; inherits from):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;_bootstrap._call_with_frames_removed&lt;span class="o"&gt;(&lt;/span&gt;exec, code, module.__dict__&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The module (the python file) gets executed using the (sometimes evil one) &lt;a href="https://docs.python.org/3/library/functions.html#exec"&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/a&gt; builtin function. 
Since, the code is executed, you then have all your python definitions at your feet to work with. 
Here's an &lt;a href="https://stackoverflow.com/questions/2220699/whats-the-difference-between-eval-exec-and-compile-in-python#answer-29456463"&gt;explanation from StackOverflow&lt;/a&gt; of the differences 
between &lt;code&gt;eval&lt;/code&gt;, &lt;code&gt;exec&lt;/code&gt; and &lt;code&gt;compile&lt;/code&gt;. Very descriptive!&lt;/p&gt;
&lt;p&gt;Lets look at an example, a complete example this time:&lt;/p&gt;
&lt;h1 id="the-pure-manual-way"&gt;The (pure) manual way&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;types&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# get out lovely finder&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meta_path&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pf&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;_frozen_importlib_external&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PathFinder&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# get the spec for &amp;quot;my_package.my_module&amp;quot;, path is given as the place to search&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_spec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_package.my_module&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/nick/tmp/my_package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;
&lt;span class="n"&gt;ModuleSpec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_package.my_module&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_frozen_importlib_external&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SourceFileLoader&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7f9117dfee48&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/nick/tmp/my_package/my_module.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path_importer_cache&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python36.zip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FileFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/usr/local/lib/python3.6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
 &lt;span class="c1"&gt;# ... other locations here&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;/home/nick/tmp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FileFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/nick/tmp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
 &lt;span class="s1"&gt;&amp;#39;/home/nick/tmp/my_package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;FileFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/home/nick/tmp/my_package&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# ~/tmp/my_package was added to the cache along with its associated FileFinder&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Hmm... loader did not created it, lets do it manually&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModuleType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# spec.name == &amp;#39;my_package.my_module&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my_package.my_module&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# module has been created. At this time we should fill it with proper attributes&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# but it works without filling it too. I&amp;#39;ll fill it.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;  &lt;span class="c1"&gt;# already equals spec.name&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;my_package.my_module&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__loader__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;origin&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__package__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt;  &lt;span class="c1"&gt;# add it to cache&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my_package.my_module&amp;#39;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/home/nick/tmp/my_package/my_module.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# the printed version of mod has changed&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__file__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__loader__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__name__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__package__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__spec__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# final step. execute the module&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# returns None&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MyClass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__builtins__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__file__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__loader__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__name__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__package__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__spec__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# Wow! Look at that! MyClass. Lets use it...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;caps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;it worked!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;IT&lt;/span&gt; &lt;span class="n"&gt;WORKED&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above all-in manual way of importing our &lt;code&gt;my_module.py&lt;/code&gt; module, was a bare implementation of the &lt;a href="https://docs.python.org/3/reference/import.html#loading"&gt;module loading pseudo code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By now, you should be able to debug better any &lt;code&gt;ModuleNotFoundError&lt;/code&gt;s or &lt;code&gt;ImportError&lt;/code&gt;s. Of course, in most cases, you will not have to swim so deep, as we did here, but at least, 
you know far more than before. In addition to all the above, the &lt;code&gt;import&lt;/code&gt; statement does a lot more while loading the module but that is an implementation detail and better be 
left to core developers. &lt;/p&gt;
&lt;p&gt;For the last, here some nice sources to look, if you want to learn more or just enjoying reading-watching:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;David Beazley's video on &lt;a href="https://www.youtube.com/watch?v=0oTh1CXRaQ0"&gt;Modules and Packages: Live and Let Die! - PyCon 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lucumr.pocoo.org/2011/2/1/exec-in-python/"&gt;Be careful with exec and eval in Python&lt;/a&gt; article by &lt;a href="http://lucumr.pocoo.org/about/"&gt;Armin Ronacher&lt;/a&gt; (the creator of &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Another article by &lt;a href="http://lucumr.pocoo.org/about/"&gt;Armin Ronacher&lt;/a&gt; &lt;a href="http://lucumr.pocoo.org/2011/9/21/python-import-blackbox/"&gt;Dealing with the Python Import Blackbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="python"></category><category term="import"></category></entry><entry><title>Webfaction LetsEncrypt Django</title><link href="https://alone-djangonaut.com/webfaction-letsencrypt-django" rel="alternate"></link><published>2016-12-31T00:00:00+02:00</published><updated>2016-12-31T00:00:00+02:00</updated><author><name>Nick Mavrakis</name></author><id>tag:alone-djangonaut.com,2016-12-31:/webfaction-letsencrypt-django</id><summary type="html">&lt;p&gt;Hosting you Django project on Webfaction is easy. Did you know that converting your website from HTTP to HTTPS, using LetsEncrypt is, also, easy too? Extra bonus: it's free of charge!&lt;/p&gt;</summary><content type="html">&lt;h2 id="why-https"&gt;Why HTTPS&lt;/h2&gt;
&lt;p&gt;First things first. I do not work for &lt;a href="https://www.google.com"&gt;Google&lt;/a&gt; nor I have any (social, financial, ethical etc) benefits from this gigantic company. But let be honest. If you are not ranked hign enough in Google's search results, your optimism about your website success is slowly betake to collapse. I think everybody that owns a website, wants his "e-property" to be shown amongst the first results in Google. Of course, you might say, that the search keywords added in the search bar are very important too, but that is not to be discussed here.&lt;/p&gt;
&lt;p&gt;So, you have a website (maybe you have build it too) and your domain is i.e &lt;code&gt;http://www.ilovewhatido.com/&lt;/code&gt;. Then you read this &lt;a href="https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html"&gt;blog post&lt;/a&gt; by Google and got terrified about your ranking position. Thinking &lt;em&gt;"Oh man, I have to change the http protocol to https. How painful will this be?"&lt;/em&gt; or &lt;em&gt;"how much do I have to pay (monthly or yearly) in order to do that?"&lt;/em&gt; or &lt;em&gt;"if I switch to https, will my web app behave the same as it was with http?"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Lets give answers to these questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;"Oh man, I have to change the http protocol to https. How painful will this be?"&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Super easy. Assuming your application is hosted on &lt;a href="https://www.webfaction.com/"&gt;Webfaction&lt;/a&gt;, just follow &lt;a href="#django-webfaction-and-letsencrypt-3-great-friends"&gt;the guide that follows&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;"How much do I have to pay (monthly or yearly) in order to do that?"&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;None! Zero! Nothing! It's free! Using &lt;a href="https://www.letsencrypt.org/"&gt;LetsEncrypt&lt;/a&gt; you get a certificate free of charge that lasts 3 months (60 days). You have the ability to renew the certificate 1 month (30 days) before expiration. Of course, you must be aware that there are various types of certificates. The most used ones are: &lt;a href="https://en.wikipedia.org/wiki/Domain-validated_certificate"&gt;Domain Validation - DV&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Public_key_certificate#Organization_validation"&gt;Organization Validation - OV&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Extended_Validation_Certificate"&gt;Extended Validation - EV&lt;/a&gt;. Each type of certificate depends on its lifetime (months or years until expiration), procedure in order to be obtained (is it just one click away or you have to wait days or weeks in order to get it), cost (from free of charge up to thousands of dollars/euros). &lt;a href="https://letsencrypt.org/docs/faq/#will-lets-encrypt-issue-organization-validation-ov-or-extended-validation-ev-certificates"&gt;LetsEncrypt issues only DN certificates&lt;/a&gt;. You can learn more about the different types of certificates &lt;a href="https://kb.wisc.edu/security/page.php?id=18922"&gt;here&lt;/a&gt;.&lt;br /&gt;
So, why there are so many kind of certificates, you ask? Apart from the fact that certifiacte authorities (CA) have to earn money somehow, each certificate type varies by occasion (are you a small, medium or large-sized company, is it just a personal blog, is it a local news website, are you a medium-sized e-commerce website etc). So, for example, a small-sized business is not obliged to pay thousands of euros/dollars in order to obtain a certificate just to prove to the end user that it is what it claims to be. This kind of business can obtain a free one. Anyway, it is up to the website owner to choose the certificate of his preference. One sidenote though, have you ever noticed in your Web browser, that in some HTTPS sites the whole address bar turns green and the business' info are visible to the left of the URL, whereas in other HTTPS sites the browser's address bar is not green and it just shows a green lockpad? This is because in the first case the website owner choosed an EV certificate (which offers this green address bar) while in the latter case the website owner choosed either a DV or an OV certificate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;"If I switch to https, will my web app behave the same as it was with http?"&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;This depends extremely on the framework your application was build. Using &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; there is nothing to worry about when switching to HTTPS. Just make sure you are including the &lt;a href="https://docs.djangoproject.com/en/dev/ref/middleware/#module-django.middleware.security"&gt;SecurityMiddleware&lt;/a&gt; in your &lt;a href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-MIDDLEWARE"&gt;MIDDLEWARE&lt;/a&gt; setting. After you switch to HTTPS, run the following Django command in your server (to which you will be connected via &lt;code&gt;ssh&lt;/code&gt;): &lt;a href="https://docs.djangoproject.com/en/dev/ref/django-admin/#cmdoption-check-deploy"&gt;&lt;code&gt;python manage.py check --deploy&lt;/code&gt;&lt;/a&gt;. This will check your deployment settings and underline any potential warnings you should take a closer look.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id="django-webfaction-and-letsencrypt-3-great-friends"&gt;Django, Webfaction and Letsencrypt (3 great friends!)&lt;/h2&gt;
&lt;p&gt;So, you have build your HTTP website using Django, uploaded to Webfaction and everything works smoothly. Now you want to switch to HTTPS. Here is what to do (do not be terrified of the too many steps, I am just too descriptive!):
&lt;strong&gt;(Many thanks to &lt;a href="https://cpbotha.net/2016/07/18/installing-free-lets-encrypt-ssl-certificates-on-webfaction-in-3-easy-steps/"&gt;cpbotha&lt;/a&gt;, &lt;a href="https://github.com/Neilpang/acme.sh"&gt;Neilpang acme.sh&lt;/a&gt; and &lt;a href="https://community.webfaction.com/questions/19988/using-letsencrypt#answer-container-19989"&gt;ryans answer&lt;/a&gt;. Forgive me if there is someone I forget.)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[UPDATE, thanks to Ned Batchelder (see comments below)]: In order for the follow to work you should have &lt;a href="https://www.openssl.org/"&gt;openssl&lt;/a&gt; installed (just run &lt;code&gt;which openssl&lt;/code&gt; and check if it's installed), otherwise install it following &lt;a href="http://stackoverflow.com/questions/9655613/installing-openssl-from-source#answer-9658354"&gt;this guide&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Login to your
    &lt;a href="https://my.webfaction.com/applications"&gt;Applications&lt;/a&gt;
    and click &lt;code&gt;Add new application&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select a name for it, say &lt;code&gt;my_ssl_app&lt;/code&gt; and under the &lt;code&gt;App category&lt;/code&gt; menu select &lt;code&gt;PHP&lt;/code&gt;. Under the &lt;code&gt;App type&lt;/code&gt; select &lt;code&gt;Static/CGI/PHP-7.0&lt;/code&gt;. Click the &lt;code&gt;Save&lt;/code&gt; button.&lt;/li&gt;
&lt;li&gt;Now navigate to your &lt;a href="https://my.webfaction.com/websites"&gt;Websites&lt;/a&gt;, make an exact copy of your existent HTTP website and enable HTTPS on it. How? Simple create a new website, choose the same domains (with and without &lt;code&gt;www&lt;/code&gt;), choose the same Application (not the one we have just created) but &lt;strong&gt;do not forget to select the button &lt;code&gt;Encrypted website (https)&lt;/code&gt;&lt;/strong&gt;. Click &lt;code&gt;Save&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You will notice that your HTTPS website says &lt;em&gt;Security HTTPS, using shared certificate&lt;/em&gt;. That's OK for now. We'll fix that later.&lt;/li&gt;
&lt;li&gt;Select your HTTP version of your website and under the &lt;code&gt;Contents&lt;/code&gt; section remove your existing application. Then, add the new one we just created (&lt;code&gt;my_ssl_app&lt;/code&gt;). Click &lt;code&gt;Save&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Now, if you visit your site you will NOT get your usual homepage&lt;/strong&gt;. We have not done any redirection to HTTPS yet. Stay with me!&lt;/li&gt;
&lt;li&gt;From your local machine open terminal and &lt;code&gt;ssh yourUserName@webXXX.webfaction.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vim ~/webapps/my_ssl_app/.htaccess&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hit key &lt;code&gt;i&lt;/code&gt; (to enter Insert mode and start writing), copy (&lt;code&gt;Ctrl + c&lt;/code&gt;) the following text and paste it (&lt;code&gt;Ctrl + Shift + v&lt;/code&gt;) to the opened file (&lt;code&gt;.htaccess&lt;/code&gt;). After pasting, hit the &lt;code&gt;Esc&lt;/code&gt; key and then write &lt;code&gt;:wq&lt;/code&gt; (this will save the file and quit the vim editor):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;RewriteEngine&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;
&lt;span class="nb"&gt;RewriteRule&lt;/span&gt; !^.well-known($|/) https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Done with redirection. Now if you visit your site (&lt;code&gt;mysite.com&lt;/code&gt;) you will be redirected to &lt;code&gt;https://mysite.com&lt;/code&gt;, BUT a security warning will arise saying that the site you are trying to visit may be dangerous or so. That's because we are using a shared certificate. Getting closer!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In terminal you must install the terrific &lt;a href="(https://github.com/Neilpang/acme.sh)"&gt;acme.sh&lt;/a&gt; script. Simply:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl https://get.acme.sh &lt;span class="p"&gt;|&lt;/span&gt; sh
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Everything is done automatically for you. Log out from the terminal and &lt;code&gt;ssh&lt;/code&gt; to log back in.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now you have the command &lt;code&gt;acme.sh&lt;/code&gt; available globally. Time to use it. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Before, of course, to request a brand new official certificate from LetsEncrypt, we must request a staging (test) certifiacte, in order to be sure that everything is working properly. So...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;acme.sh --issue --test -d mysite.com -d www.mysite.com -w ~/webapps/my_ssl_app&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If everything worked, you should have 7 files to the path &lt;code&gt;~/.acme.sh/mysite.com/&lt;/code&gt; which are (&lt;code&gt;ca.cer&lt;/code&gt;, &lt;code&gt;fullchain.cer&lt;/code&gt;, &lt;code&gt;mysite.com.cer&lt;/code&gt;, &lt;code&gt;mysite.com.conf&lt;/code&gt;, &lt;code&gt;mysite.com.csr&lt;/code&gt;, &lt;code&gt;mysite.com.csr.conf&lt;/code&gt; and &lt;code&gt;mysite.com.key&lt;/code&gt;). If something is missing, then maybe this is because these are just test certificates and keys. &lt;strong&gt;Not usable in production&lt;/strong&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now that everything worked, it's time to issue for the real ones. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(notice the missing &lt;code&gt;--test&lt;/code&gt; parameter)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;acme.sh --issue -d mysite.com -d www.mysite.com -w ~/webapps/my_ssl_app&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The above command will fetch the same kind of files (with the same name) but this time this folks are official. Their lifetime is 90 days and LetsEncrypt lets you renew your certificates no earlier than 60 days after your last issue. For example, if you issued your certificates today (2016-12-31) then the earlier you can issue them again (renew them) is at 2017-02-31. Of course there is always the option to renew them earlier by using the &lt;code&gt;--force&lt;/code&gt; argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now go to the &lt;a href="https://my.webfaction.com/ssl-certificates"&gt;SSL certificates&lt;/a&gt;, select &lt;code&gt;Add SSL Certificate&lt;/code&gt; and choose &lt;code&gt;Upload Certificate&lt;/code&gt;. &lt;em&gt;This step, you only have to do it once&lt;/em&gt;. Give it a name, say &lt;code&gt;mysite_cert&lt;/code&gt; (&lt;strong&gt;remember this name, it will be used in the last step&lt;/strong&gt;) and then copy the contents of &lt;code&gt;~/.acme.sh/mysite.com/mysite.com.cer&lt;/code&gt; to a file and the upload it to the &lt;code&gt;Certificate&lt;/code&gt; section. Do the same with the &lt;code&gt;~/.acme.sh/mysite.com.key&lt;/code&gt; and the &lt;code&gt;Private Key&lt;/code&gt; section and finally with the &lt;code&gt;~/.acme.sh/ca.cer&lt;/code&gt; and the &lt;code&gt;Intermediates/bundle&lt;/code&gt; section. All these could be done via the &lt;a href="https://docs.webfaction.com/xmlrpc-api/apiref.html#method-create_certificate"&gt;create_certificate funtion&lt;/a&gt; of the Webfaction's API, of course.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[SCRIPT UPDATED ON 2017-02-21] Now for my favourite part, &lt;em&gt;automation&lt;/em&gt;. I have written a Python (2.7) script in order to talk to &lt;a href="https://docs.webfaction.com/xmlrpc-api/apiref.html"&gt;Webfaction's API&lt;/a&gt; and update my certificates automatically without bringing my site offline AND without having me (a human) to interact with the Control Panel every 2 months in order to install manually the renewed certificates. This Python script is executed every day (as a cron job). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/local/bin python&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PIPE&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;xmlrpclib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ServerProxy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Fault&lt;/span&gt;

&lt;span class="n"&gt;HIDDEN_ACME_DIR_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.acme.sh&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;data_to_var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;st_size&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;The file &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt; does not exist inside &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt; or is empty. Exception: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;var_cert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;var_cert&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Run the command advised by acme.sh script in order to renew the certificates.&lt;/span&gt;
    &lt;span class="c1"&gt;# Each certificate lasts 90 days and the max permitted day to renew a certificate is 60 days from the issue date -&lt;/span&gt;
    &lt;span class="c1"&gt;# in other words the earlier we can renew a certificate is 30 days before expiration. This can be changed through&lt;/span&gt;
    &lt;span class="c1"&gt;# the --days argument during the --issue step. Type &amp;quot;.acme.sh/acme.sh --help&amp;quot; for more information.&lt;/span&gt;
    &lt;span class="c1"&gt;# This script will run as a cron job every day in order for the certs to be renewed when appropriate.&lt;/span&gt;

    &lt;span class="n"&gt;acme_process&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;/acme.sh&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;HIDDEN_ACME_DIR_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cron&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;acme_process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;An error occurred during the renewal process. Error: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Cert success.&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hostname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;An error occurred while trying to determine the hostname. Error: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://api.webfaction.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# Fixed. Not to be changed.&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# Fixed. Not to be changed.&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;s_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;pwd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# Your Webfaction password.&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;domain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mysite.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# Your domain name where you issued the certificate.&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;cert_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mysite_cert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# Your certification name (see step #20).&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;# Initially empty values (to be filled later with data from files)&lt;/span&gt;
        &lt;span class="n"&gt;domain_cert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pv_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;intermediate_cert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="c1"&gt;# Directory declarations in order to know where to work&lt;/span&gt;
        &lt;span class="n"&gt;valid_cert_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{home}&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{acme}&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{domain}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
            &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HOME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;acme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;HIDDEN_ACME_DIR_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;domain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="c1"&gt;# Change directory to the one that matches our domain&lt;/span&gt;
        &lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;valid_cert_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Test if current working directory is the valid one&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;valid_cert_dir&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AssertionError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Current working directory is not &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;! Instead is &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;valid_cert_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;getcwd&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

        &lt;span class="c1"&gt;# try to connect to Webfaction API&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ServerProxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;session_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pwd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;Fault&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Exception occurred at connection with Webfaction&amp;#39;s API. &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# Connection is successful. Proceed...&lt;/span&gt;

            &lt;span class="c1"&gt;# read domain certificate and store it as a variable&lt;/span&gt;
            &lt;span class="n"&gt;domain_cert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data_to_var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;.cer&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;domain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

            &lt;span class="c1"&gt;# read private key certificate and store it as a variable&lt;/span&gt;
            &lt;span class="n"&gt;pv_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data_to_var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;.key&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;domain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

            &lt;span class="c1"&gt;# read intermediate certificate and store it as a variable&lt;/span&gt;
            &lt;span class="n"&gt;intermediate_cert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data_to_var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ca.cer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;# Install the renewed certificate to your Web server through the Webfaction&amp;#39;s API&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;domain_cert&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;pv_key&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;intermediate_cert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# https://docs.webfaction.com/xmlrpc-api/apiref.html#method-update_certificate&lt;/span&gt;
                &lt;span class="c1"&gt;# update_certificate(session_id, name, certificate, private_key, intermediates)&lt;/span&gt;
                &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_certificate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cert_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;domain_cert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pv_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;intermediate_cert&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Save the above to your server, say as &lt;code&gt;.certificate_renewal.py&lt;/code&gt; and &lt;strong&gt;place it under your $HOME directory&lt;/strong&gt;, &lt;code&gt;~/.certificate_renewal.py&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now, &lt;code&gt;crontab -e&lt;/code&gt; and delete the line at the very bottom that was inserted during the installation of the &lt;code&gt;acme.sh&lt;/code&gt; script before (step #10).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instead, write:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;0 2 * * * /usr/local/bin/python $HOME/.certificate_renewal.py 2&amp;amp;gt;&amp;amp;gt; /path/to/your/log&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The above cron job will run every day at 02.00 (am) and check if your certificates need any renewal. If so, then they will be automatically updated for you (via the function &lt;a href="https://docs.webfaction.com/xmlrpc-api/apiref.html#method-update_certificate"&gt;update_certificate&lt;/a&gt;) from the API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Last step. Go to your &lt;a href="https://my.webfaction.com/websites/663047/edit-website"&gt;websites&lt;/a&gt; and choose the HTTPS version of your domain. Under the "Security" section, "Choose a certificate" dropdown menu, choose the certificate you created (not the "Shared certificate", of course). You will find it with the name you gave it on step 20 (in this example we gave it the name &lt;code&gt;mysite_cert&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[BONUS]: If you're using Python 3 (which you should) the following modification should be made in order for the script to work. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First: change &lt;code&gt;from xmlrpclib import ServerProxy, Fault&lt;/code&gt; to &lt;code&gt;from xmlrpc&lt;/code&gt;&lt;strong&gt;&lt;code&gt;.client&lt;/code&gt;&lt;/strong&gt; import ServerProxy, Fault`.&lt;/li&gt;
&lt;li&gt;Second: change &lt;code&gt;if 'Cert success.' in out:&lt;/code&gt; to &lt;code&gt;if 'Cert success.' in out&lt;/code&gt;&lt;strong&gt;&lt;code&gt;.decode('utf8')&lt;/code&gt;&lt;/strong&gt;:`.&lt;/li&gt;
&lt;li&gt;Third: change &lt;code&gt;'s_name': hostname.strip('\n').title(),&lt;/code&gt; to &lt;code&gt;'s_name': hostname&lt;/code&gt;&lt;strong&gt;&lt;code&gt;.decode('utf8')&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;.strip('\n').title(),&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Fourth: in your cron job change &lt;code&gt;/usr/local/bin/python&lt;/code&gt; (which defaults to python 2.7 but maybe not if you have already an alias to it with python 3. Better check it by simply typing &lt;code&gt;python&lt;/code&gt; and check the version you got back. If its 3.x.x then do not alter the cron on step #24, otherwise continue to the change) to &lt;code&gt;/usr/local/bin/python3.x&lt;/code&gt; where &lt;code&gt;x&lt;/code&gt; is the version you want to use. That's it!&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Wasn't that easy enough? Now you have a HTTPS secured website where the certification is automatically renewed every 2 months!&lt;/p&gt;
&lt;p&gt;Happy New Year to all Earth(ians)!&lt;/p&gt;</content><category term="Https"></category><category term="python"></category><category term="django"></category><category term="webfaction"></category><category term="letsencrypt"></category></entry><entry><title>Django custom sitemap (updated 2018)</title><link href="https://alone-djangonaut.com/django-custom-sitemap-updated-2018" rel="alternate"></link><published>2016-12-27T00:00:00+02:00</published><updated>2018-09-29T00:00:00+03:00</updated><author><name>Nick Mavrakis</name></author><id>tag:alone-djangonaut.com,2016-12-27:/django-custom-sitemap-updated-2018</id><summary type="html">&lt;p&gt;Build a sitemap (xml file) for multi-regional and multilingual websites using Django's builtin Sitemap framework.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;UPDATE Sep 2018&lt;/strong&gt;: The old post regarding the template tag had some bugs. As of 2018, I fixed it and now this post
is updated and works only for Python 3.6+.&lt;/p&gt;
&lt;p&gt;So you have done the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Used your favorite Web Framework (&lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;) to build your website.&lt;/li&gt;
&lt;li&gt;Made enough &lt;a href="https://docs.djangoproject.com/en/dev/topics/testing/"&gt;tests&lt;/a&gt; to verify that everything is working flawlessly.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/topics/i18n/translation/"&gt;Translated&lt;/a&gt; your whole website in each 
   &lt;a href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-LANGUAGES"&gt;language&lt;/a&gt; and (of course) each page has its translated version.&lt;/li&gt;
&lt;li&gt;Used &lt;a href="https://docs.djangoproject.com/en/dev/topics/i18n/translation/#django.conf.urls.i18n.i18n_patterns"&gt;&lt;code&gt;i18n_patterns&lt;/code&gt;&lt;/a&gt; function to prefix your urls with the language code.&lt;/li&gt;
&lt;li&gt;Hosted your website somewhere and...&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;asked yourself why Google does not index your translated pages of your website.&lt;/p&gt;
&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This &lt;a href="https://support.google.com/webmasters/answer/182192?hl=en&amp;amp;ref_topic=2370587"&gt;excellent article from Google&lt;/a&gt; states that there are 2 kinds
of "translated" websites: &lt;code&gt;multilingual&lt;/code&gt; and &lt;code&gt;multi-regional&lt;/code&gt;. You can have none, one of them or both, depending on your needs.
Let's assume that you have build a &lt;code&gt;multiregional&lt;/code&gt; website:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;A multilingual website is any website that offers content in more than one language. Examples of multilingual websites might include a 
  Canadian business with an English and a French version of its site, or a blog on Latin American soccer available in both Spanish and Portuguese.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It also states that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Keep the content for each language on separate URLs. Don’t use cookies to show translated versions of the page.
  Consider cross-linking each language version of a page. That way, a French user who lands on the German version of your page
  can get to the right language version with a single click. Avoid automatic redirection based on the user’s perceived language.
  These redirections could prevent users (and search engines) from viewing all the versions of your site.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not to be confused with too many quotes, lets clarify some things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lets say that your domain is &lt;code&gt;www.example.com&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Suppose you have set the &lt;a href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-LANGUAGE"&gt;&lt;code&gt;LANGUAGE&lt;/code&gt;&lt;/a&gt; setting as &lt;code&gt;en-US&lt;/code&gt;.
  This means that the default (and fallback, if translations of other languages are not found) language of your entire website will be &lt;code&gt;en-US&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Next, you have support for 2 other languages, declared in the &lt;a href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-LANGUAGES"&gt;LANGUAGES&lt;/a&gt; setting. Say, &lt;code&gt;it&lt;/code&gt; and &lt;code&gt;el&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;As we said, you use &lt;a href="https://docs.djangoproject.com/en/dev/topics/i18n/translation/#django.conf.urls.i18n.i18n_patterns"&gt;&lt;code&gt;i18n_patterns&lt;/code&gt;&lt;/a&gt; function to prefix your urls with the language code.
  So, the &lt;code&gt;about&lt;/code&gt; page in English would be: &lt;code&gt;www.example.com/en/about/&lt;/code&gt;, the Italian version: &lt;code&gt;www.example.com/it/about/&lt;/code&gt;
  and the Greek version: &lt;code&gt;www.example.com/el/about/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When someone (who lives in an English spoken language region) searches Google (keywords such as "example about") for your about page, 
  the result is &lt;code&gt;www.example.com/en/about/&lt;/code&gt; (the english version of the about page).&lt;/li&gt;
&lt;li&gt;When I search Google with keywords such as "example about" (I live in Greece) I expect to get &lt;code&gt;www.example.com/el/about/&lt;/code&gt;
  but instead I get the same result as the English spoken user. Same happens with the Italian user.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, how do you tell Google (at least Googlebot) to index the other versions of the same page?&lt;/p&gt;
&lt;h2 id="enter-the-hreflang-attribute"&gt;Enter the &lt;strong&gt;hreflang&lt;/strong&gt; attribute&lt;/h2&gt;
&lt;p&gt;There are 3 ways to notify web crawlers to index your translated pages.
&lt;a href="https://support.google.com/webmasters/answer/189077?hl=en&amp;amp;ref_topic=2370587"&gt;Another excellent article&lt;/a&gt; from Google which exposes the 3 potential 
ways (HTML tags, HTTP headers and Sitemap).&lt;/p&gt;
&lt;p&gt;In this post, we will cover the 3rd option. That is, build a Sitemap for our entrire website with respect to &lt;strong&gt;all&lt;/strong&gt; the supported languages.
How do we do it? Using the &lt;a href="https://docs.djangoproject.com/en/dev/ref/contrib/sitemaps/"&gt;Django's built-in Sitemap framework&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But before we jump into code, take a look at the &lt;a href="https://support.google.com/webmasters/answer/2620865?hl=en&amp;amp;ref_topic=2370587"&gt;template of the sitemap file&lt;/a&gt;
which we need to construct. The key point is to &lt;strong&gt;include in each &lt;code&gt;&amp;lt;url&amp;gt;&amp;lt;/url&amp;gt;&lt;/code&gt; element the page itself and the other versions of this page&lt;/strong&gt;
using the &lt;code&gt;&amp;lt;xhtml:link rel="alternate" hreflang="xx" href="xxx"/&amp;gt;&lt;/code&gt; element. Maybe this sounds confusing but bear with me.&lt;/p&gt;
&lt;p&gt;Assuming that you have done the &lt;a href="https://docs.djangoproject.com/en/dev/ref/contrib/sitemaps/#installation"&gt;basics&lt;/a&gt; (in order for the &lt;code&gt;Sitemap&lt;/code&gt;
framework to work properly) and you are in position to generate a &lt;code&gt;sitemap.xml&lt;/code&gt; file when someone hits &lt;code&gt;www.example.com/sitemap.xml&lt;/code&gt;,
then lets begin with building owr own sitemap file.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create an empty file &lt;code&gt;sitemap.xml&lt;/code&gt; and place it under the &lt;code&gt;templates/&lt;/code&gt; directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure that the &lt;code&gt;templates/&lt;/code&gt; dir is &lt;a href="https://docs.djangoproject.com/en/dev/ref/settings/#dirs"&gt;discoverable&lt;/a&gt;
   by Django (but you have already done this, right?).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit your root &lt;code&gt;URLconf&lt;/code&gt; file and under the url that serves the sitemap file, change the template to be used.
   In my case, I have this (note the &lt;code&gt;template_name&lt;/code&gt; dictionary key):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^sitemap\.xml/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contrib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sitemaps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sitemap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sitemaps&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SITEMAPS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="s1"&gt;&amp;#39;template_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sitemap.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; 
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;django.contrib.sitemaps.views.sitemap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit the &lt;code&gt;sitemap.py&lt;/code&gt; file that is responsible of generating the sitemap and add in each &lt;code&gt;Class&lt;/code&gt; that inherits from &lt;code&gt;django.contrib.sitemaps.Sitemap&lt;/code&gt;
   the attribute &lt;code&gt;i18n = True&lt;/code&gt;, in order for the sitemap to include &lt;strong&gt;all&lt;/strong&gt; the urls (including the ones with the prefixed language code).
   If we didn't include it (the default value is &lt;code&gt;False&lt;/code&gt;) then the sitemap would include i.e only the &lt;code&gt;www.example.com/about/&lt;/code&gt; page and not
   the other two ones (&lt;code&gt;it&lt;/code&gt; and &lt;code&gt;el&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create an app (&lt;code&gt;python manage.py startapp&lt;/code&gt;), if you haven't already, that will hold the project's wide template tags (or/and filters).
   My usual way to do this, is that with every project I always create an app (called &lt;code&gt;dtl_utils&lt;/code&gt;) which hosts code that is project-wide applied
   (not bound to a specific app). Follow the guide on &lt;a href="https://docs.djangoproject.com/en/dev/howto/custom-template-tags/#writing-custom-template-tags"&gt;how to write custom template tags&lt;/a&gt;.
   I'll assume that the &lt;code&gt;.py&lt;/code&gt; file which contains the template tag is named &lt;code&gt;dtl_tags.py&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the &lt;code&gt;dtl_tags.py&lt;/code&gt; file and add the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib.parse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlparse&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.html&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mark_safe&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;

&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;LANG_CODES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LANGUAGES&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;PATTERN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^/(&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;|&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LANG_CODES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;)/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;REGEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PATTERN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;HREF_LANG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;amp;lt;xhtml:link rel=&amp;quot;alternate&amp;quot; hreflang=&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{hreflang}&lt;/span&gt;&lt;span class="s1"&gt;&amp;quot; href=&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{href}&lt;/span&gt;&lt;span class="s1"&gt;&amp;quot; /&amp;amp;gt;&amp;#39;&lt;/span&gt;

&lt;span class="nd"&gt;@register&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;simple_tag&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sitemap_hreflang_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    parse.urlparse extracts to 6 components (https://tools.ietf.org/html/rfc1808.html):&lt;/span&gt;

&lt;span class="sd"&gt;    scheme://   netloc/           path    ;parameters  ?query   #fragment&lt;/span&gt;
&lt;span class="sd"&gt;      |            |               |          |          |          |&lt;/span&gt;
&lt;span class="sd"&gt;    |---|   |--------------|  |----------| |------|  |-------|  |------|&lt;/span&gt;
&lt;span class="sd"&gt;    https://www.example.com   /en/moments/ ;type=a   ?active=1   #go-to&lt;/span&gt;

&lt;span class="sd"&gt;    We want each url (generated by the sitemap) to include itself along with&lt;/span&gt;
&lt;span class="sd"&gt;    other translated versions.&lt;/span&gt;
&lt;span class="sd"&gt;    For example: the url &amp;quot;www.example.com&amp;quot; (el) should include itself along&lt;/span&gt;
&lt;span class="sd"&gt;    with &amp;quot;www.example.com/en/&amp;quot; (en) and the url &amp;quot;www.example.com/en/&amp;quot; (en)&lt;/span&gt;
&lt;span class="sd"&gt;    should include itself along with &amp;quot;www.example.com&amp;quot; (el). This procedure&lt;/span&gt;
&lt;span class="sd"&gt;    should apply to all urls.&lt;/span&gt;
&lt;span class="sd"&gt;    Google&amp;#39;s answer:&lt;/span&gt;
&lt;span class="sd"&gt;    support.google.com/webmasters/answer/2620865?hl=en&amp;amp;amp;ref_topic=2370587&lt;/span&gt;
&lt;span class="sd"&gt;    :param str uri: A fully qualified URL incl schema (https://ex.com/statues/)&lt;/span&gt;
&lt;span class="sd"&gt;    :return: string&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;parsed_uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urlparse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;to_return&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;lang_code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;LANG_CODES&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;new_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;REGEX&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;lang_code&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parsed_uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;new_uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parsed_uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;new_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;to_return&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HREF_LANG&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hreflang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lang_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;new_uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;geturl&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mark_safe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n\t\t&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_return&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The comments inside the template tag &lt;code&gt;sitemap_hreflang_url&lt;/code&gt; are quite self-explanatory.
   We take advantage of all the urls generated by the &lt;code&gt;sitemap.py&lt;/code&gt; file (not shown here, but a simple look of this is shown in the
   &lt;a href="https://docs.djangoproject.com/en/dev/ref/contrib/sitemaps/#a-simple-example"&gt;Django docs&lt;/a&gt;) with the option &lt;code&gt;i18n = True&lt;/code&gt; in each &lt;code&gt;Class&lt;/code&gt;
   and we try to figure out all the other versions of this url.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open the empty &lt;code&gt;templates/sitemap.xml&lt;/code&gt; file and add the following:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% load dtl_tags %}&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;urlset&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.sitemaps.org/schemas/sitemap/0.9&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;xmlns:xhtml=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
{% for url in urlset %}
  &lt;span class="nt"&gt;&amp;lt;url&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;loc&amp;gt;&lt;/span&gt;{{ url.location }}&lt;span class="nt"&gt;&amp;lt;/loc&amp;gt;&lt;/span&gt;
    {% if url.lastmod %}&lt;span class="nt"&gt;&amp;lt;lastmod&amp;gt;&lt;/span&gt;{{ url.lastmod|date:&amp;quot;Y-m-d&amp;quot; }}&lt;span class="nt"&gt;&amp;lt;/lastmod&amp;gt;&lt;/span&gt;{% endif %}
    {% if url.changefreq %}&lt;span class="nt"&gt;&amp;lt;changefreq&amp;gt;&lt;/span&gt;{{ url.changefreq }}&lt;span class="nt"&gt;&amp;lt;/changefreq&amp;gt;&lt;/span&gt;{% endif %}
    {% if url.priority %}&lt;span class="nt"&gt;&amp;lt;priority&amp;gt;&lt;/span&gt;{{ url.priority }}&lt;span class="nt"&gt;&amp;lt;/priority&amp;gt;&lt;/span&gt;{% endif %}
    {% sitemap_hreflang_url url.location %}
  &lt;span class="nt"&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
{% endfor %}
&lt;span class="nt"&gt;&amp;lt;/urlset&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A few notes here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;?xm version=...&lt;/code&gt; line should be on the first line (along with the &lt;code&gt;load&lt;/code&gt; statement), otherwise the &lt;code&gt;.xml&lt;/code&gt; file will not be valid.&lt;/li&gt;
&lt;li&gt;The core of this template lives inside &lt;code&gt;django.contrib.sitemaps.templates&lt;/code&gt; directory. The only parts that we have added are
      &lt;code&gt;{% load dtl_tags %}&lt;/code&gt;, &lt;code&gt;xmlns:xhtml="http://www.w3.org/1999/xhtml"&lt;/code&gt; and &lt;code&gt;{% sitemap_hreflang_url url.location %}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So, that's it! &lt;/p&gt;
&lt;p&gt;With the above implementation you can have a Google verified sitemap.xml which will inform the Googlebot about the other (translated)
versions of your urls-pages.&lt;/p&gt;</content><category term="Django"></category><category term="python"></category><category term="sitemap"></category><category term="google"></category></entry><entry><title>Django admin template structure</title><link href="https://alone-djangonaut.com/django-admin-template-structure" rel="alternate"></link><published>2016-10-16T00:00:00+03:00</published><updated>2016-10-16T00:00:00+03:00</updated><author><name>Nick Mavrakis</name></author><id>tag:alone-djangonaut.com,2016-10-16:/django-admin-template-structure</id><summary type="html">&lt;p&gt;Today we will see how template inheritance works inside the Django admin contribution package&lt;/p&gt;</summary><content type="html">&lt;p&gt;As you all (probably) know, &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; is a magnificent Web framework to build the website of your dreams. There is a plethora of tutorials, how-to's, getting-started, django-for-dummies out there in the internet-wild. I am not going to show you the &lt;code&gt;Django&lt;/code&gt; basics (&lt;a href="https://docs.djangoproject.com/en/dev/topics/db/models/"&gt;&lt;code&gt;models&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://docs.djangoproject.com/en/dev/topics/http/views/"&gt;&lt;code&gt;views&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://docs.djangoproject.com/en/dev/ref/templates/"&gt;&lt;code&gt;templates&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://docs.djangoproject.com/en/dev/ref/forms/"&gt;&lt;code&gt;forms&lt;/code&gt;&lt;/a&gt; to name a few). I just want to share with you the template inheritance of the incredible &lt;a href="https://docs.djangoproject.com/en/dev/ref/contrib/admin/"&gt;Django admin contribution package&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At this time of writing, I am dreaming of a much more appealing admin interface which is based on the super-fancy &lt;a href="https://almsaeedstudio.com/"&gt;AdminLTE&lt;/a&gt; template (there is a free version you can download, under the MIT License -- more about licences &lt;a href="http://choosealicense.com/"&gt;here&lt;/a&gt;). But in order to adopt the new-dreamed template in my own project I must understand the template inheritance workflow of the built-in &lt;code&gt;Django&lt;/code&gt; admin app.&lt;/p&gt;
&lt;p&gt;I know there is a package, already out there (&lt;a href="https://github.com/StephenPCG/django-adminlte-templates"&gt;django-adminlte-templates&lt;/a&gt;), that offer you the capability of using this admin template but I wanted to deeply understand how the &lt;code&gt;Django&lt;/code&gt; admin template system is assembled and working so flawlessly. Lets get to work:&lt;/p&gt;
&lt;h1 id="the-core-ones"&gt;The core ones&lt;/h1&gt;
&lt;p&gt;In this section we will describe briefly, the core HTML templates where the rest inherit from. If you do not have &lt;code&gt;Django&lt;/code&gt; installed (!) or you're bored enough right now to navigate to the actual path where these templates are stored in your machine, here is &lt;code&gt;Django&lt;/code&gt;'s admin &lt;a href="https://github.com/django/django/tree/master/django/contrib/admin/templates"&gt;github source for the templates&lt;/a&gt; (you're one click away!).&lt;/p&gt;
&lt;p&gt;As you can see there are two folders &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;registration&lt;/code&gt;. In the rest of this article we will assume that we are working under the &lt;code&gt;admin&lt;/code&gt; directory, unless stated otherwise where we will be under the &lt;code&gt;registration&lt;/code&gt; directory.&lt;/p&gt;
&lt;h2 id="basehtml"&gt;base.html&lt;/h2&gt;
&lt;p&gt;As &lt;a href="http://anebrun.com/"&gt;Ane Brun&lt;/a&gt; says in her song &lt;a href="https://www.youtube.com/watch?v=qMCQgb1YxI8"&gt;One&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It all starts somewhere, it all starts with one&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The root of the &lt;code&gt;Django&lt;/code&gt; admin templates is &lt;strong&gt;this file&lt;/strong&gt; and is located inside the &lt;code&gt;Django&lt;/code&gt; folder that you installed via your &lt;a href="https://docs.djangoproject.com/en/dev/intro/install/#install-django"&gt;preferred method&lt;/a&gt;.
Assuming that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you &lt;strong&gt;are using&lt;/strong&gt; &lt;code&gt;virtualenv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;you &lt;strong&gt;are using&lt;/strong&gt; Linux and&lt;/li&gt;
&lt;li&gt;your &lt;code&gt;.virtualenvs&lt;/code&gt; folder is inside your &lt;code&gt;$HOME&lt;/code&gt; directory (note the &lt;code&gt;.&lt;/code&gt; dot in front - indicates a hidden file. Press &lt;code&gt;Ctrl+H&lt;/code&gt; to view hidden files)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;then you will find this file following this path: &lt;code&gt;$HOME/.virtualenvs/&amp;lt;your_virtual_env_name&amp;gt;/lib/python&amp;lt;your_version_of_python&amp;gt;/site-packages/django/contrib/admin/templates/admin&lt;/code&gt;
Easy eh?&lt;/p&gt;
&lt;p&gt;Inside the &lt;code&gt;admin&lt;/code&gt; folder you will find all the templates &lt;code&gt;Django&lt;/code&gt; admin uses, to present itself. Nothing inherits directly from this file (in other words, there is no template which has this line at the top: &lt;code&gt;{% extends "admin/base.html" %}&lt;/code&gt;) except from the &lt;code&gt;base_site.html&lt;/code&gt; file.&lt;/p&gt;
&lt;h2 id="base_sitehtml"&gt;base_site.html&lt;/h2&gt;
&lt;p&gt;This is the only file that &lt;a href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/#extends"&gt;extends&lt;/a&gt; the &lt;em&gt;one&lt;/em&gt; file (the root, the &lt;code&gt;base.html&lt;/code&gt; file). I believe, until now you are following along.
Every other template file extends this one (see the graph &lt;a href="#dj-admin-diagram"&gt;below&lt;/a&gt; for a better understanding). What? An exception? Oh, yes! Let me rephrase it:
Every other template file extends this one except from the &lt;code&gt;app_index.html&lt;/code&gt; file which extends &lt;code&gt;index.html&lt;/code&gt; which in turn extends &lt;code&gt;base_site.html&lt;/code&gt; which (finally) extends &lt;code&gt;base.html&lt;/code&gt;. This would be the longest &lt;em&gt;chain of extends&lt;/em&gt; you will find in the &lt;code&gt;Django&lt;/code&gt; admin templates.&lt;/p&gt;
&lt;h2 id="indexhtml"&gt;index.html&lt;/h2&gt;
&lt;p&gt;This file is just used as a base template for the &lt;code&gt;app_index.html&lt;/code&gt; file. No other file extends &lt;code&gt;index.html&lt;/code&gt;. Only the &lt;code&gt;app_index.html&lt;/code&gt; extends &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id="rest-of-the-templates"&gt;Rest of the templates&lt;/h1&gt;
&lt;p&gt;Every other single template (apart from the ones mentioned above) either extends the &lt;code&gt;base_site.html&lt;/code&gt; or act as standalone ready to be &lt;a href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/#std:templatetag-include"&gt;&lt;em&gt;included&lt;/em&gt;&lt;/a&gt; somewhere (for example &lt;code&gt;actions.html&lt;/code&gt;).&lt;/p&gt;
&lt;h1 id="url-template-file-relationship"&gt;URL-Template file relationship&lt;/h1&gt;
&lt;p&gt;In this section we will see which template file is actually called under a particular admin URL. We are assuming that inside your &lt;a href="https://docs.djangoproject.com/en/dev/topics/http/urls/"&gt;URLconf&lt;/a&gt; file (also known as &lt;code&gt;urls.py&lt;/code&gt;) the string &lt;code&gt;admin&lt;/code&gt; is the one that you have chosen to visit the admin website. For example, if your site is &lt;code&gt;mywebsite.com&lt;/code&gt; and this line is in your &lt;code&gt;urlpatterns&lt;/code&gt; variable under &lt;code&gt;urls.py&lt;/code&gt;: &lt;code&gt;url(r'^admin/', include(admin.site.urls)),&lt;/code&gt; then you should visit the magnificent admin website at &lt;code&gt;mywebsite.com/admin/&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URL: &lt;strong&gt;&lt;code&gt;yourwebsite.com/&amp;lt;app_label&amp;gt;/&amp;lt;model_name&amp;gt;/&lt;/code&gt;&lt;/strong&gt;, Template: &lt;strong&gt;&lt;code&gt;change_list.html&lt;/code&gt;&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Inside the template &lt;code&gt;change_list.html&lt;/code&gt; the following templates are &lt;em&gt;included&lt;/em&gt;: &lt;code&gt;change_list_results.html&lt;/code&gt;, &lt;code&gt;actions.html&lt;/code&gt; and &lt;code&gt;pagination.html&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;URL (yourwebsite.com/admin/...)&lt;/th&gt;
&lt;th&gt;Template&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;''&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The admin home page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;app_label&amp;gt;/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;app_index.html&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;You have clicked on the name of the app (not model)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;app_label&amp;gt;/&amp;lt;model_name&amp;gt;/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;change_list.html&lt;/code&gt;&amp;#185;&lt;/td&gt;
&lt;td&gt;You have clicked on the name of a model&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;app_label&amp;gt;/&amp;lt;model_name&amp;gt;/&amp;lt;pk&amp;gt;/change/&lt;/code&gt; &lt;code&gt;&amp;lt;app_label&amp;gt;/&amp;lt;model_name&amp;gt;/add/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;change_form.html&lt;/code&gt;&amp;#178;&lt;/td&gt;
&lt;td&gt;You have clicked on an object to change it&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;app_label&amp;gt;/&amp;lt;model_name&amp;gt;/&amp;lt;pk&amp;gt;/history/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;object_history.html&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;You have clicked on the HISTORY button to see the object's history&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;app_label&amp;gt;/&amp;lt;model_name&amp;gt;/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;delete_confirmation.html&lt;/code&gt;&amp;#179;&lt;/td&gt;
&lt;td&gt;You have checked &lt;strong&gt;one&lt;/strong&gt; object, selected &lt;em&gt;Delete selected &lt;models_name&gt;&lt;/em&gt; and pressed &lt;em&gt;Go&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;app_label&amp;gt;/&amp;lt;model_name&amp;gt;/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;delete_selected_confirmation.html&lt;/code&gt;&amp;#179;&lt;/td&gt;
&lt;td&gt;You have checked &lt;strong&gt;multiple&lt;/strong&gt; objects, selected &lt;em&gt;Delete selected &lt;models_name&gt;&lt;/em&gt; and pressed &lt;em&gt;Go&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;login/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;login.html&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;You requested to login&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;password_change/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;registration/password_change_form.html&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;You requested to change your password&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;logout/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;registration/logged_out.html&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;You requested to logged out&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&amp;#185; Inside the template &lt;code&gt;change_list.html&lt;/code&gt; these templates are used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;change_list_results.html&lt;/code&gt; (to show the objects of this model - entries in the database, if you like)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;actions.html&lt;/code&gt; (to show the &lt;em&gt;actions&lt;/em&gt; &lt;code&gt;div&lt;/code&gt; which contains the default action &lt;code&gt;Delete&lt;/code&gt; and any other of your own)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pagination.html&lt;/code&gt; (for the pagination across your objects)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;date_hierarchy.html&lt;/code&gt; (only if the &lt;a href="https://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.date_hierarchy"&gt;&lt;code&gt;date_hierarchy&lt;/code&gt;&lt;/a&gt; is used)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter.html&lt;/code&gt; (only if the &lt;a href="https://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_filter"&gt;&lt;code&gt;list_filter&lt;/code&gt;&lt;/a&gt; is used)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;search_form.html&lt;/code&gt; (only if the &lt;a href="https://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.search_fields"&gt;&lt;code&gt;search_fields&lt;/code&gt;&lt;/a&gt; is used)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;#178; Inside the template &lt;code&gt;change_form.html&lt;/code&gt; these templates are used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;edit_inline/stacked.html&lt;/code&gt; and &lt;code&gt;edit_inline/tabular.html&lt;/code&gt; (if the &lt;a href="https://docs.djangoproject.com/en/dev/ref/contrib/admin/#inlinemodeladmin-objects"&gt;&lt;code&gt;StackedInline&lt;/code&gt; or &lt;code&gt;TabularInline&lt;/code&gt;&lt;/a&gt; is used)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;related_widget_wrapper.html&lt;/code&gt; (again, if an inline is used)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;includes/fieldset.html&lt;/code&gt; (if the &lt;a href="https://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.fieldsets"&gt;&lt;code&gt;fieldsets&lt;/code&gt;&lt;/a&gt; or/and an inline is used)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;submit_line.html&lt;/code&gt; (in order to show the bottom - or &lt;a href="https://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.save_on_top"&gt;top&lt;/a&gt; - &lt;code&gt;div&lt;/code&gt; of the &lt;em&gt;Delete&lt;/em&gt;, &lt;em&gt;Save and add another`&lt;/em&gt;, &lt;em&gt;Save and continue editing&lt;/em&gt; and &lt;em&gt;Save&lt;/em&gt; buttons)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prepopulated_fields_js.html&lt;/code&gt; (if the &lt;a href="https://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.prepopulated_fields"&gt;&lt;code&gt;prepopulated_fields&lt;/code&gt;&lt;/a&gt; is used)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;#179; Inside the templates &lt;code&gt;delete_confirmation.html&lt;/code&gt; and &lt;code&gt;delete_selected_confirmation.html&lt;/code&gt; the &lt;code&gt;includes/object_delete_summary.html&lt;/code&gt;template is used.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;img id="dj-admin-diagram" alt="Django admin template inheritance diagram" src="/images/django_admin_template_structure/admin_template_inheritance.jpg"&gt;
&lt;figcaption&gt;Django admin template inheritance diagram&lt;/figcaption&gt;
&lt;/figure&gt;</content><category term="Django"></category><category term="python"></category><category term="django-admin"></category><category term="django-admin templates"></category></entry></feed>